{
  "swagger": "2.0",
  "info": {
    "description": "vRealize Network Insight API Reference",
    "version": "1.1.8",
    "title": "vRealize Network Insight API Reference"
  },
  "host": "vrni.example.com",
  "basePath": "/api/ni",
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication APIs"
    },
    {
      "name": "Data Sources",
      "description": "Data Source APIs"
    },
    {
      "name": "Entities",
      "description": "Entities APIs"
    },
    {
      "name": "Search",
      "description": "Search APIs"
    },
    {
      "name": "Infrastructure",
      "description": "Infra APIs"
    },
    {
      "name": "Applications",
      "description": "Applications APIs"
    },
    {
      "name": "Microsegmentation",
      "description": "Micro-Segmentation APIs"
    },
    {
      "name": "Info",
      "description": "Info APIs"
    },
    {
      "name": "Settings",
      "description": "Settings APIs"
    },
    {
      "name": "Schema",
      "description": "Schema APIs"
    },
    {
      "name": "Metrics",
      "description": "Metrics APIs"
    },
    {
      "name": "Path",
      "description": "Path Related APIs"
    },
    {
      "name": "Logs",
      "description": "Logs APIs"
    }
  ],
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "description": "API Key - NetworkInsight {token}",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "parameters": {
    "Identifier": {
      "name": "id",
      "in": "path",
      "description": "The Entity ID of object requestion information on",
      "required": true,
      "type": "string"
    },
    "Time": {
      "name": "time",
      "in": "query",
      "description": "Time in epoch seconds",
      "required": false,
      "type": "integer",
      "format": "int64"
    },
    "Size": {
      "name": "size",
      "in": "query",
      "description": "Page size of results",
      "required": false,
      "type": "number",
      "default": 10
    },
    "Cursor": {
      "name": "cursor",
      "in": "query",
      "description": "Cursor from previous response",
      "required": false,
      "type": "string"
    },
    "StartTime": {
      "name": "start_time",
      "in": "query",
      "description": "Start time for query in epoch seconds",
      "required": false,
      "type": "number"
    },
    "EndTime": {
      "name": "end_time",
      "in": "query",
      "description": "End time for query in epoch seconds",
      "required": false,
      "type": "number"
    },
    "UserType": {
      "name": "type",
      "in": "query",
      "description": "Type of user",
      "required": true,
      "type": "string"
    },
    "UserGroupType": {
      "name": "type",
      "in": "query",
      "description": "Type of user-group",
      "required": true,
      "type": "string"
    },
    "EventTags": {
      "name": "event_tags",
      "in": "query",
      "collectionFormat": "multi",
      "description": "Event tags",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "EventStatus": {
      "name": "event_status",
      "in": "query",
      "description": "Status of event open or closed",
      "required": false,
      "type": "string",
      "default": "all",
      "enum": [
        "open",
        "closed",
        "all"
      ]
    },
    "EventType": {
      "name": "event_type",
      "in": "query",
      "description": "Type of event, e.g UserDefinedProblemEvent",
      "required": false,
      "type": "string"
    },
    "UpdateTimeFrom": {
      "name": "update_time_from",
      "in": "query",
      "description": "Events that were created or updated or closed between this time and update_time_to, in seconds",
      "required": false,
      "type": "number"
    },
    "UpdateTimeTo": {
      "name": "update_time_to",
      "in": "query",
      "description": "Events that were created or updated or closed between update_time_from and this time, in seconds",
      "required": false,
      "type": "number"
    },
    "EventSeverityList": {
      "name": "event_severity",
      "in": "query",
      "collectionFormat": "multi",
      "description": "Event severity filter",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "Critical",
          "Warning",
          "Moderate",
          "Info"
        ]
      }
    },
    "EventManagers": {
      "name": "managers",
      "in": "query",
      "collectionFormat": "multi",
      "description": "The entity ID of the manager of entity on which event is raised",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "paths": {
    "/auth/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create an auth token",
        "description": "<html><body> vRealize Network Insight supports token based authentication. Tokens are non-modifiable identifiers returned by the system when the user has successfully authenticated using valid credentials. Token expires after expiry time returned in the response. All API requests must provide the auth token in Authorization header in following format:<br> Authorization &#58; NetworkInsight {token} <br> If a token is invalid or expired, 401-Unauthorized error gets returned in the response of the API request. <br> There is limit of 100 valid tokens per user and further requests will return 401-Unauthorized. So, users are advised to delete the tokens after use <br> Expired tokens are cleaned periodically by the system. </body></html>",
        "operationId": "create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User Credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCredential"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Token"
            },
            "examples": {
              "token": "1rT7tm4riiACSfxrO2BvkA==",
              "expiry": 1509332642427
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Delete an auth token.",
        "description": "Deletes the auth token provided in Authorization header.\nDeleting an expired or invalid token will result in 401 Unauthorized error.",
        "operationId": "delete",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/auth/token/vidm": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create an auth token for user mapped through VMware Identity Manager",
        "description": "<html><body> vRealize Network Insight supports token based authentication. Tokens are non-modifiable identifiers returned by the system when the user has been successfully authenticated using valid access token provided by configured VMware Identity Manager appliance. Token expires after expiry time (returned in the response). All API requests must provide the auth token in Authorization header in following format:<br> Authorization &#58; NetworkInsight {token} <br> If a token is invalid or expired, 401-Unauthorized error gets returned in the response of the API request. </body></html>",
        "operationId": "createVidmUserToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User access token provided by VMware Identity Manager.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VidmToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/auth/vidm/client-id": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get the client-id for making user access-token request to VMware Identity Manager",
        "description": "Get client-id of password grant OAuth client registered at VMware Identity Manager.\nThis client-id along with user credentials is required while making an access token request to VMware Identity Manager.",
        "operationId": "getVidmOauthClienId",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VidmOauthClientResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/infra/nodes": {
      "get": {
        "tags": [
          "Infrastructure"
        ],
        "summary": "List nodes",
        "description": "Get list of infrastructure nodes. Only admin users can retrieve this information.",
        "operationId": "listNodes",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeListResult"
            },
            "examples": {
              "results": [
                {
                  "id": "18230:901:1585583463",
                  "entity_type": "NODE"
                },
                {
                  "id": "18230:901:1706494033",
                  "entity_type": "NODE"
                }
              ],
              "total_count": 2
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/infra/nodes/{id}": {
      "get": {
        "tags": [
          "Infrastructure"
        ],
        "summary": "Show node details",
        "description": "Get details of infrastructure nodes. Only admin users can get this information. The proxy id is\nrequired for adding a data source for selecting appropriate proxy node to add the data source.",
        "operationId": "getNode",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Node"
            },
            "examples": {
              "id": "18230:901:1585583463",
              "entity_type": "NODE",
              "node_type": "PROXY_VM",
              "node_id": "IOYHU2J",
              "ip_address": "10.126.103.156"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/info/version": {
      "get": {
        "tags": [
          "Info"
        ],
        "summary": "Show version info",
        "description": "Show version info",
        "operationId": "getVersion",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "api_version": "1.1.7"
            },
            "schema": {
              "$ref": "#/definitions/VersionResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data-sources/vcenters": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a vCenter data source",
        "description": "Add a vCenter data source. You must provide one of IP or FQDN field in the request body.\nAppropriate proxy id is retrieved from /infra/nodes URL to select the proxy node.",
        "operationId": "addVcenterDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "vCenter Credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VCenterDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VCenterDataSource"
            },
            "examples": {
              "entity_id": "18230:902:993642895",
              "entity_type": "VCenterDataSource",
              "ip": "10.197.17.68",
              "fqdn": null,
              "proxy_id": "18230:901:1585583463",
              "nickname": "My vCenter",
              "enabled": true,
              "notes": "Located in DC1",
              "credentials": {
                "username": "administrator@vsphere.local",
                "password": ""
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List vCenter data sources",
        "description": "List vCenter data sources",
        "operationId": "listVcenters",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:902:993642895",
                  "entity_type": "VCenterDataSource"
                },
                {
                  "entity_id": "18230:902:627340998",
                  "entity_type": "VCenterDataSource"
                }
              ],
              "total_count": 2
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/vcenters/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show vCenter data source details",
        "description": "Show vCenter data source details",
        "operationId": "getVcenter",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/VCenterDataSource"
            },
            "examples": {
              "entity_id": "18230:902:993642895",
              "entity_type": "VCenterDataSource",
              "ip": "10.197.17.68",
              "fqdn": null,
              "proxy_id": "18230:901:1585583463",
              "nickname": "My vCenter",
              "enabled": true,
              "notes": "Located in DC2",
              "credentials": {
                "username": "administrator@vsphere.local",
                "password": ""
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a vCenter data source.",
        "description": "Update a vcenter data source. Only nickname, notes and credentials can be updated.",
        "operationId": "updateVcenter",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/VCenterDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/VCenterDataSource"
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a vCenter data source",
        "description": "Delete a data source",
        "operationId": "deleteVcenter",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/vcenters/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a vCenter data source",
        "description": "Enable a vCenter data source",
        "operationId": "enableVcenter",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/vcenters/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a vCenter data source",
        "description": "Disable a vCenter data source",
        "operationId": "disableVcenter",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/f5-bigip": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a F5 BIG-IP as data source",
        "description": "Add a F5 BIG-IP Load Balancer as a data source",
        "operationId": "addF5BIGIP",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a F5 BIG-IP as datasource",
            "schema": {
              "$ref": "#/definitions/F5BIGIPDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/F5BIGIPDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List F5 BIG-IP data sources",
        "description": "List F5 BIG-IP data sources",
        "operationId": "listF5BIGIP",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:952:993642895",
                  "entity_type": "F5BIGIPDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/f5-bigip/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show F5 BIG-IP data source details",
        "description": "Show F5 BIG-IP data source details",
        "operationId": "getF5BIGIP",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/F5BIGIPDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a F5 BIG-IP data source",
        "description": "Update a F5 BIG-IP data source",
        "operationId": "updateF5BIGIP",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/F5BIGIPDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/F5BIGIPDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a F5 BIG-IP data source",
        "description": "Delete a F5 BIG-IP data source",
        "operationId": "deleteF5BIGIP",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/f5-bigip/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a F5 BIG-IP data source",
        "description": "Enable a F5 BIG-IP data source",
        "operationId": "enableF5BIGIP",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/f5-bigip/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a F5 BIG-IP data source",
        "description": "Disable a F5 BIG-IP data source",
        "operationId": "disableF5BIGIP",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/f5-bigip/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for F5 BIG-IP data source",
        "description": "Show SNMP config for F5 BIG-IP data source",
        "operationId": "getF5BIGIPSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for a F5 BIG-IP data source",
        "description": "Update SNMP config for a F5 BIG-IP data source",
        "operationId": "updateF5BIGIPSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/huawei": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a Huawei as data source",
        "description": "Add switch Datasource",
        "operationId": "addHuawei",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a Huawei as datasource",
            "schema": {
              "$ref": "#/definitions/HuaweiSwitchDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/HuaweiSwitchDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Huawei data sources",
        "description": "List Huawei data sources",
        "operationId": "listHuawei",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:960:993642895",
                  "entity_type": "HuaweiSwitchDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/huawei/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Huawei data source details",
        "description": "Show Huawei data source details",
        "operationId": "getHuawei",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HuaweiSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Huawei data source",
        "description": "Update a Huawei data source",
        "operationId": "updateHuawei",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HuaweiSwitchDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HuaweiSwitchDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Huawei data source",
        "description": "Delete a Huawei data source",
        "operationId": "deleteHuawei",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/huawei/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Huawei data source",
        "description": "Enable a Huawei data source",
        "operationId": "enableHuawei",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/huawei/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Huawei data source",
        "description": "Disable a Huawei data source",
        "operationId": "disableHuawei",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/huawei/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for Huawei data source",
        "description": "Show SNMP config for Huawei data source",
        "operationId": "getHuaweiSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for a Huawei data source",
        "description": "Update SNMP config for a Huawei data source",
        "operationId": "updateHuaweiSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/generic-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create generic switch as data source",
        "description": "Add generic switch as data source.",
        "operationId": "addGenericSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/GenericSwitchDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/GenericSwitchDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List generic switch data sources",
        "description": "List generic switch data sources",
        "operationId": "listGenericSwitch",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:963:993642895",
                  "entity_type": "GenericSwitchDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/generic-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show generic switch data source details",
        "description": "Show generic switch data source details",
        "operationId": "getGenericSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GenericSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update generic switch data source",
        "description": "Update generic switch data source",
        "operationId": "updateGenericSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/GenericSwitchDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GenericSwitchDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete generic switch data source",
        "description": "Delete generic switch data source",
        "operationId": "deleteGenericSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/generic-switches/{id}/data": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Data Sources"
        ],
        "summary": "File Upload",
        "description": "Upload configuration of the generic data source in .zip format",
        "operationId": "fileUpload",
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "required": true,
            "description": "The file to upload."
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/generic-switches/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable generic switch data source",
        "description": "Enable generic switch data source",
        "operationId": "enableGenericSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/generic-switches/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable generic switch data source",
        "description": "Disable generic switch data source",
        "operationId": "disableGenericSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpe-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a HPE switch as data source",
        "description": "Add a HPE switch as data source",
        "operationId": "addHPESwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HPESwitchDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/HPESwitchDataSource"
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List HPE switch data sources",
        "description": "List HPE switch data sources",
        "operationId": "listHPESwitches",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:1960:993642895",
                  "entity_type": "HPESwitchDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpe-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show HPE switch data source details",
        "description": "Show HPE switch data source details",
        "operationId": "getHPESwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HPESwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a HPE switch data source",
        "description": "Update a HPE switch data source",
        "operationId": "updateHPESwitchManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HPESwitchDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HPESwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a HPE switch data source",
        "description": "Delete a HPE switch data source",
        "operationId": "deleteHPESwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpe-switches/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a HPE switch data source",
        "description": "Enable a HPE switch data source",
        "operationId": "enableHPESwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpe-switches/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a HPE switch data source",
        "description": "Disable a HPE switch data source",
        "operationId": "disableHPESwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpe-switches/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for HPE switch data source",
        "description": "Show SNMP config for HPE switch data source",
        "operationId": "getHPESwitchSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for HPE switch data source",
        "description": "Update SNMP config for HPE switch data source",
        "operationId": "updateHPESwitchSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/mellanox-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a Mellanox switch as data source",
        "description": "Add a Mellanox switch as data source",
        "operationId": "addMellanoxSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MellanoxSwitchDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/MellanoxSwitchDataSource"
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Mellanox switch data sources",
        "description": "List Mellanox switch data sources",
        "operationId": "listMellanoxSwitches",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:985:993642895",
                  "entity_type": "MellanoxSwitchDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/mellanox-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Mellanox switch data source details",
        "description": "Show Mellanox switch data source details",
        "operationId": "getMellanoxSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HPESwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Mellanox switch data source",
        "description": "Update a Mellanox switch data source",
        "operationId": "updateMellanoxSwitchManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MellanoxSwitchDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MellanoxSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Mellanox switch data source",
        "description": "Delete a Mellanox switch data source",
        "operationId": "deleteMellanoxSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/mellanox-switches/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Mellanox switch data source",
        "description": "Enable a Mellanox switch data source",
        "operationId": "enableMellanoxSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/mellanox-switches/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Mellanox switch data source",
        "description": "Disable a Mellanox switch data source",
        "operationId": "disableMellanoxSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/mellanox-switches/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for Mellanox switch data source",
        "description": "Show SNMP config for Mellanox switch data source",
        "operationId": "getMellanoxSwitchSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for Mellanox switch data source",
        "description": "Update SNMP config for Mellanox switch data source",
        "operationId": "updateMellanoxSwitchSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-asrxr-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a Cisco ASR XR switch as data source",
        "description": "Add a Cisco ASR XR switch as data source",
        "operationId": "addCiscoASRXRSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CiscoASRXRSwitchDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/CiscoASRXRSwitchDataSource"
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Cisco ASR XR switch data sources",
        "description": "List Cisco ASR XR switch data sources",
        "operationId": "listCiscoASRXRSwitches",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:985:993642895",
                  "entity_type": "CiscoASRXRSwitchDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-asrxr-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Cisco ASR XR switch data source details",
        "description": "Show Cisco ASR XR switch data source details",
        "operationId": "getCiscoASRXRSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CiscoASRXRSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Cisco ASR XR switch data source",
        "description": "Update a Cisco ASR XR switch data source",
        "operationId": "updateCiscoASRXRSwitchManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CiscoASRXRSwitchDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CiscoASRXRSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Cisco ASR XR switch data source",
        "description": "Delete a Cisco ASR XR switch data source",
        "operationId": "deleteCiscoASRXRSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-asr-xr-switches/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Cisco ASR XR switch data source",
        "description": "Enable a Cisco ASR XR switch data source",
        "operationId": "enableCiscoASRXRSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-asrxr-switches/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Cisco ASR XR switch data source",
        "description": "Disable a Cisco ASR XR switch data source",
        "operationId": "disableCiscoASRXRSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-asr-xr-switches/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for Cisco ASR XR switch data source",
        "description": "Show SNMP config for Cisco ASR XR switch data source",
        "operationId": "getCiscoASRXRSwitchSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for Cisco ASR XR switch data source",
        "description": "Update SNMP config for Cisco ASR XR switch data source",
        "operationId": "updateCiscoASRXRSwitchSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a Cisco switch data source",
        "description": "Add Cisco switch as data source. You must provide one of IP or FQDN field in the request body.\nAppropriate proxy id is retrieved from infra/nodes URL to select the proxy node.",
        "operationId": "addCiscoSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a Cisco switch as datasource.",
            "schema": {
              "$ref": "#/definitions/CiscoSwitchDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/CiscoSwitchDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Cisco switch data sources",
        "description": "List Cisco switch data sources",
        "operationId": "listCiscoSwitches",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Cisco switch data source details",
        "description": "Show Cisco switch data source details",
        "operationId": "getCiscoSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CiscoSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Cisco switch data source",
        "description": "Update a Cisco switch data source. Only credentials, nickname and notes can be updated.",
        "operationId": "updateCiscoSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CiscoSwitchDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CiscoSwitchDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Cisco switch data source",
        "description": "Delete a Cisco switch data source",
        "operationId": "deleteCiscoSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-switches/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Cisco switch data source",
        "description": "Enable a Cisco switch data source",
        "operationId": "enableCiscoSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-switches/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Cisco switch data source",
        "description": "Disable a Cisco switch data source",
        "operationId": "disableCiscoSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-switches/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for Cisco switch data source",
        "description": "Show SNMP config for Cisco switch data source",
        "operationId": "getCiscoSwitchSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for Cisco switch data source",
        "description": "Update SNMP config for Cisco switch data source",
        "operationId": "updateCiscoSwitchSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-switches/{id}/wan-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show WAN config for Cisco switch data source",
        "description": "Show WAN config for Cisco switch data source. This will only work for Cisco ASR and ISR data sources.",
        "operationId": "getCiscoSwitchWANConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WANConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update WAN config for Cisco switch data source",
        "description": "Update WAN config for Cisco switch data source. This will only work for Cisco ASR and ISR data sources.",
        "operationId": "updateCiscoSwitchWANConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/WANConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WANConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a Dell switch data source",
        "description": "Add a Dell switch as data source",
        "operationId": "addDellSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Dell switch data sources",
        "description": "List Dell switch data sources",
        "operationId": "listDellSwitches",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:902:993642895",
                  "entity_type": "DellSwitchDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Dell switch data source details",
        "description": "Get a Dell switch data source details",
        "operationId": "getDellSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Dell switch data source",
        "description": "Update a Dell switch data source. Only credentials, nickname and notes can be updated",
        "operationId": "updateDellSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Dell switch data source",
        "description": "Delete a data source",
        "operationId": "deleteDellSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-switches/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Dell switch data source",
        "description": "Enable a Dell switch data source",
        "operationId": "enableDellSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-switches/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Dell switch data source",
        "description": "Disable a Dell switch data source",
        "operationId": "disableDellSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-switches/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for Dell switch data source",
        "description": "Show SNMP config for Dell switch data source",
        "operationId": "getDellSwitchSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for Dell switch data source",
        "description": "Update SNMP config for Dell switch data source",
        "operationId": "updateDellSwitchSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-os10-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a Dell OS10 switch data source",
        "description": "Add a Dell OS10 switch as data source",
        "operationId": "addDellOs10Switch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DellOs10SwitchDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Dell os10 switch data sources",
        "description": "List Dell os10 switch data sources",
        "operationId": "listDellOs10Switches",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:902:993642895",
                  "entity_type": "DellSwitchDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-os10-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Dell os10 switch data source details",
        "description": "Get a Dell os10 switch data source details",
        "operationId": "getDellOs10Switch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Dell os10 switch data source",
        "description": "Update a Dell os10 switch data source. Only credentials, nickname and notes can be updated",
        "operationId": "updateDellOs10Switch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DellSwitchDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Dell os10 switch data source",
        "description": "Delete a data source",
        "operationId": "deleteDellOs10Switch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-os10-switches/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Dell os10 switch data source",
        "description": "Enable a Dell os10 switch data source",
        "operationId": "enableDellOs10Switch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-os10-switches/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Dell os10 switch data source",
        "description": "Disable a Dell os10 switch data source",
        "operationId": "disableDellOs10Switch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/dell-os10-switches/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for Dell os10 switch data source",
        "description": "Show SNMP config for Dell os10 switch data source",
        "operationId": "getDellOs10SwitchSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for Dell os10 switch data source",
        "description": "Update SNMP config for Dell os10 switch data source",
        "operationId": "updateDellOs10SwitchSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/brocade-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a Brocade switch data source",
        "description": "Add Brocade switch as a data source",
        "operationId": "addBrocadeSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/BrocadeSwitchDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/BrocadeSwitchDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Brocade switch data sources",
        "description": "List Brocade switch data sources",
        "operationId": "listBrocadeSwitches",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:908:993642895",
                  "entity_type": "BrocadeSwitchDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/brocade-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Brocade switch data source details",
        "description": "Show Brocade switch data source details",
        "operationId": "getBrocadeSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BrocadeSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Brocade switch data source",
        "description": "Update a Brocade switch data source. Only credentials, nickname and notes can be updated.",
        "operationId": "updateBrocadeSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/BrocadeSwitchDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BrocadeSwitchDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Brocade switch data source",
        "description": "Delete a Brocade switch data source",
        "operationId": "deleteBrocadeSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/brocade-switches/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Brocade switch data source",
        "operationId": "enableBrocadeSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/brocade-switches/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Brocade switch data source",
        "operationId": "disableBrocadeSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/brocade-switches/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for Brocade switch data source",
        "description": "Show SNMP config for Brocade switch data source",
        "operationId": "getBrocadeSwitchSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for Brocade switch data source",
        "description": "Update SNMP config for Brocade switch data source",
        "operationId": "updateBrocadeSwitchSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/juniper-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add a Juniper switch as data source",
        "description": "Add a Juniper switch Datasource",
        "operationId": "addJuniperSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a Cisco switch as datasource",
            "schema": {
              "$ref": "#/definitions/JuniperSwitchDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/JuniperSwitchDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Juniper switch data sources",
        "description": "List Juniper switch data sources",
        "operationId": "listJuniperSwitches",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:909:993642895",
                  "entity_type": "JuniperSwitchDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/juniper-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Juniper switch data source details",
        "description": "Show Juniper switch data source details",
        "operationId": "getJuniperSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JuniperSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Juniper switch data source",
        "description": "Update a Juniper switch data source",
        "operationId": "updateJuniperSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/JuniperSwitchDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JuniperSwitchDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Juniper switch data source",
        "description": "Delete a Juniper switch data source",
        "operationId": "deleteJuniperSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/juniper-switches/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Juniper switch data source",
        "description": "Enable a Juniper switch data source",
        "operationId": "enableJuniperSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/juniper-switches/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Juniper switch data source",
        "description": "Disable a Juniper switch data source",
        "operationId": "disableJuniperSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/juniper-switches/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for Juniper switch data source",
        "description": "Show SNMP config for Juniper switch data source",
        "operationId": "getJuniperSwitchSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for a Juniper switch data source",
        "description": "Update SNMP config for a Juniper switch data source",
        "operationId": "updateJuniperSwitchSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/arista-switches": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an Arista switch data source",
        "description": "Add Arista switch data source",
        "operationId": "addAristaSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a Cisco switch as datasource",
            "schema": {
              "$ref": "#/definitions/AristaSwitchDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/AristaSwitchDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Arista switch data sources",
        "description": "List Arista switch data sources",
        "operationId": "listAristaSwitches",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:906:993642895",
                  "entity_type": "AristaSwitchDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/arista-switches/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Arista switch data source details",
        "description": "Show Arista switch data source details",
        "operationId": "getAristaSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AristaSwitchDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an Arista switch data source",
        "description": "Update an switch data source",
        "operationId": "updateAristaSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AristaSwitchDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AristaSwitchDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an Arista switch data source",
        "description": "Delete an Arista switch data source",
        "operationId": "deleteAristaSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/arista-switches/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an Arista switch data source",
        "description": "Enable an Arista switch data source",
        "operationId": "enableAristaSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/arista-switches/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an Arista switch data source",
        "description": "Disable an Arista switch data source",
        "operationId": "disableAristaSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/arista-switches/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for Arista switch data source",
        "description": "Show SNMP config for Arista switch data source",
        "operationId": "getAristaSwitchSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for Arista switch data source",
        "description": "Update SNMP config for Arista switch data source",
        "operationId": "updateAristaSwitchSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/checkpoint-firewalls": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a Check Point firewall",
        "description": "Add Check Point firewall as data source",
        "operationId": "addCheckpointFirewall",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a Check Point firewall as data source",
            "schema": {
              "$ref": "#/definitions/CheckpointFirewallDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/CheckpointFirewallDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Check Point firewall data sources",
        "description": "List Check Point firewall data sources",
        "operationId": "listCheckpointFirewalls",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:910:993642895",
                  "entity_type": "CheckpointFirewallDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/checkpoint-firewalls/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Check Point firewall data source details",
        "description": "Show Check Point firewall data source details",
        "operationId": "getCheckpointFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CheckpointFirewallDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Check Point firewall data source",
        "description": "Update a Check Point firewall data source",
        "operationId": "updateCheckpointFirewall",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CheckpointFirewallDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CheckpointFirewallDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Check Point firewall data source",
        "description": "Delete a Check Point firewall data source",
        "operationId": "deleteCheckpointFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/checkpoint-firewalls/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Check Point firewall data source",
        "description": "Enable a Check Point firewall data source",
        "operationId": "enableCheckpointFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/checkpoint-firewalls/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Check Point firewall data source",
        "description": "Disable a Check Point firewall data source",
        "operationId": "disableCheckpointFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/panorama-firewalls": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create Palo Alto Networks Panorama firewall data source",
        "description": "Add Palo Alto Networks Panorama firewall as data source",
        "operationId": "addPanoramaFirewall",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a Palo Alto Networks Panorama firewall as datasource",
            "schema": {
              "$ref": "#/definitions/PanFirewallDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/PanFirewallDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Palo Alto Networks Panorama firewall data sources",
        "description": "List Palo Alto Networks Panorama firewall data sources",
        "operationId": "listPanoramaFirewalls",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:911:993642895",
                  "entity_type": "PanFirewallDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/panorama-firewalls/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Palo Alto Networks Panorama firewall data source details",
        "description": "Show Palo Alto Networks Panorama firewall data source details",
        "operationId": "getPanoramaFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PanFirewallDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Palo Alto Networks Panorama firewall data source",
        "description": "Update a Palo Alto Networks Panorama firewall data source",
        "operationId": "updatePanoramaFirewall",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PanFirewallDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PanFirewallDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Palo Alto Networks Panorama firewall data source",
        "description": "Delete a Palo Alto Networks Panorama firewall data source",
        "operationId": "deletePanoramaFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/panorama-firewalls/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Palo Alto Networks Panorama firewall data source",
        "description": "Enable a Palo Alto Networks Panorama firewall data source",
        "operationId": "enablePanoramaFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/panorama-firewalls/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Palo Alto Networks Panorama firewall data source",
        "description": "Disable a Palo Alto Networks Panorama firewall data source",
        "operationId": "disablePanoramaFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/fortinet-firewalls": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Add Fortinet firewall as data source",
        "description": "Add Fortinet firewall as data source",
        "operationId": "addFortinetFirewall",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a Fortinet firewall as data source",
            "schema": {
              "$ref": "#/definitions/FortinetFirewallDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/FortinetFirewallDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Fortinet firewall data sources",
        "description": "List Fortinet firewall data sources",
        "operationId": "listFortinetFirewalls",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:910:993642895",
                  "entity_type": "FortinetFirewallDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/fortinet-firewalls/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Fortinet firewall data source details",
        "description": "Show Fortinet firewall data source details",
        "operationId": "getFortinetFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FortinetFirewallDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Fortinet firewall data source",
        "description": "Update a Fortinet firewall data source",
        "operationId": "updateFortinetFirewall",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/FortinetFirewallDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FortinetFirewallDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Fortinet firewall data source",
        "description": "Delete a Fortinet firewall data source",
        "operationId": "deleteFortinetFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/fortinet-firewalls/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Fortinet firewall data source",
        "description": "Enable a Fortinet firewall data source",
        "operationId": "enableFortinetFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/fortinet-firewalls/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Fortinet firewall data source",
        "description": "Disable a Fortinet firewall data source",
        "operationId": "disableFortinetFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/ucs-managers": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a Cisco UCS Manager data source",
        "description": "Add a Cisco UCS Manager as data source",
        "operationId": "addUcsManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UCSManagerDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/UCSManagerDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Cisco UCS Manager data sources",
        "description": "List Cisco UCS Manager data sources",
        "operationId": "listUcsManagers",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:912:993642895",
                  "entity_type": "UCSManagerDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/ucs-managers/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Cisco UCS Manager data source details",
        "description": "Show Cisco UCS Manager data source details",
        "operationId": "getUcsManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UCSManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Cisco UCS Manager data source",
        "description": "Update a Cisco UCS Manager data source",
        "operationId": "updateUcsManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UCSManagerDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UCSManagerDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Cisco UCS Manager data source",
        "description": "Delete a Cisco UCS Manager data source",
        "operationId": "deleteUcsManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/ucs-managers/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Cisco UCS Manager data source",
        "description": "Enable a Cisco UCS Manager data source",
        "operationId": "enableUcsManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/ucs-managers/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Cisco UCS Manager data source",
        "description": "Disable a Cisco UCS Manager data source",
        "operationId": "disableUcsManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/ucs-managers/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for Cisco UCS Manager",
        "description": "Show SNMP config for Cisco UCS Manager",
        "operationId": "getUcsSnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for Cisco UCS Manager",
        "description": "Update SNMP config for Cisco UCS Manager",
        "operationId": "updateUcsSnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-aci": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a Cisco ACI data source",
        "description": "Add a Cisco ACI as data source",
        "operationId": "addCiscoACI",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CiscoACIDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/CiscoACIDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Cisco ACI data sources",
        "description": "List Cisco ACI data sources",
        "operationId": "listCiscoACI",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:912:993642895",
                  "entity_type": "CiscoACIDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-aci/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Cisco ACI data source details",
        "description": "Show Cisco ACI data source details",
        "operationId": "getCiscoACI",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CiscoACIDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a Cisco ACI data source",
        "description": "Update a Cisco ACI data source",
        "operationId": "updateCiscoACIManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CiscoACIDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CiscoACIDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a Cisco ACI data source",
        "description": "Delete a Cisco ACI data source",
        "operationId": "deleteCiscoACI",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-aci/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a Cisco ACI data source",
        "description": "Enable a Cisco ACI data source",
        "operationId": "enableCiscoACI",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-aci/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a Cisco ACI data source",
        "description": "Disable a Cisco ACI data source",
        "operationId": "disableCiscoACI",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/cisco-aci/{id}/snmp-config": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show SNMP config for Cisco ACI",
        "description": "Show SNMP config for Cisco ACI",
        "operationId": "getCiscoACISnmpConfig",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update SNMP config for Cisco ACI",
        "description": "Update SNMP config for Cisco ACI",
        "operationId": "updateCiscoACISnmpConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SNMPConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpvc-managers": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a HPVC manager data source",
        "description": "Add HPVC manager data source",
        "operationId": "addHpvcManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add HPVC manager data source",
            "schema": {
              "$ref": "#/definitions/HPVCManagerDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/HPVCManagerDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List HPVC manager data sources",
        "description": "List HPVC manager data sources",
        "operationId": "listHpvcManagers",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:914:993642895",
                  "entity_type": "HPVCManagerDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpvc-managers/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show HPVC data source details",
        "description": "Show HPVC data source details",
        "operationId": "getHpvcManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HPVCManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a HPVC manager data source",
        "description": "Update a HPVC manager data source",
        "operationId": "updateHpvcManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HPVCManagerDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HPVCManagerDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a HPVC manager data source",
        "description": "Delete a HPVC manager data source",
        "operationId": "deleteHpvcManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpvc-managers/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a HPVC manager data source",
        "description": "Enable a HPVC manager data source",
        "operationId": "enableHpvcManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpvc-managers/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a HPVC manager data source",
        "description": "Disable a HPVC manager data source",
        "operationId": "disableHpvcManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpov-managers": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a HP OneView manager data source",
        "description": "Add a HP OneView manager data source",
        "operationId": "addHpovManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HPOneViewManagerDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/HPOneViewManagerDataSource"
            },
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List HP OneView manager data sources",
        "description": "List HP OneView manager data sources",
        "operationId": "listHpovManagers",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:915:993642895",
                  "entity_type": "HPOneViewManagerDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpov-managers/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show HP OneView data source details",
        "description": "Show HP OneView data source details",
        "operationId": "getHpovManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HPOneViewManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a HP OneView data source",
        "description": "Update a HP OneView data source",
        "operationId": "updateHpovManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HPOneViewManagerDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HPOneViewManagerDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a HP OneView data source",
        "description": "Delete a HP OneView data source",
        "operationId": "deleteHpovManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpov-managers/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a HP OneView data source",
        "description": "Enable a HP OneView data source",
        "operationId": "enableHpovManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hpov-managers/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a HP OneView data source",
        "description": "Disable a HP OneView data source",
        "operationId": "disableHpovManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxt-managers": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an NSX-T Manager data source",
        "description": "Add an NSX-T Manager data source",
        "operationId": "addNsxtManagerDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NSXTManagerDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NSXTManagerDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List NSX-T Manager data sources",
        "description": "List NSX-T Manager data sources",
        "operationId": "listNsxtManagers",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:903:993642895",
                  "entity_type": "NSXTManagerDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxt-managers/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show NSX-T Manager data source details",
        "description": "Show NSX-T Manager data source details",
        "operationId": "getNsxtManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NSXTManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an NSX-T Manager data source",
        "description": "Update an NSX-T Manager data source",
        "operationId": "updateNsxtManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NSXTManagerDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NSXTManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an NSX-T Manager data source",
        "description": "Delete an NSX-T Manager data source",
        "operationId": "deleteNsxtManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxt-managers/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an NSX-T Manager data source",
        "description": "Enable an NSX-T Manager data source",
        "operationId": "enableNsxtManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxt-managers/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an NSX-T Manager data source",
        "description": "Disable an NSX-T Manager data source",
        "operationId": "disableNsxtManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxalb": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an NSX Advanced Load Balancer data source",
        "description": "Add an NSX Advanced Load Balancer data source",
        "operationId": "addNSXALBDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NSXALBDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NSXALBDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List NSX Advanced Load Balancer data sources",
        "description": "List NSX Advanced Load Balancer data sources",
        "operationId": "listNSXALB",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:955:993642567",
                  "entity_type": "NSXALBDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxalb/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show NSX Advanced Load Balancer data source details",
        "description": "Show NSX Advanced Load Balancer data source details",
        "operationId": "getNSXALB",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NSXALBDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an NSX Advanced Load Balancer data source",
        "description": "Update an NSX Advanced Load Balancer data source",
        "operationId": "updateNSXALB",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NSXALBDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NSXALBDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an NSX Advanced Load Balancer data source",
        "description": "Delete an NSX Advanced Load Balancer data source",
        "operationId": "deleteNSXALB",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxalb/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an NSX Advanced Load Balancer data source",
        "description": "Enable an NSX Advanced Load Balancer data source",
        "operationId": "enableNSXALB",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxalb/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an NSX Advanced Load Balancer data source",
        "description": "Disable an NSX Advanced Load Balancer data source",
        "operationId": "disableNSXALB",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/pks": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an VMware Tanzu Kubernetes Grid Integrated data source",
        "description": "Add an VMware Tanzu Kubernetes Grid Integrated data source",
        "operationId": "addPKSDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PKSDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PKSDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List VMware Tanzu Kubernetes Grid Integrated data sources",
        "description": "List VMware Tanzu Kubernetes Grid Integrated data sources",
        "operationId": "listPKS",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:903:993642895",
                  "entity_type": "PKSDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/pks/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show VMware Tanzu Kubernetes Grid Integrated data source details",
        "description": "Show VMware Tanzu Kubernetes Grid Integrated data source details",
        "operationId": "getPKS",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PKSDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an VMware Tanzu Kubernetes Grid Integrated data source",
        "description": "Update an VMware Tanzu Kubernetes Grid Integrated data source",
        "operationId": "updatePKS",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PKSDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PKSDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an VMware Tanzu Kubernetes Grid Integrated data source",
        "description": "Delete an VMware Tanzu Kubernetes Grid Integrated data source",
        "operationId": "deletePKS",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/pks/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an VMware Tanzu Kubernetes Grid Integrated data source",
        "description": "Enable an VMware Tanzu Kubernetes Grid Integrated data source",
        "operationId": "enablePKS",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/pks/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an VMware Tanzu Kubernetes Grid Integrated data source",
        "description": "Disable an VMware Tanzu Kubernetes Grid Integrated data source",
        "operationId": "disablePKS",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxv-managers": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an NSX-v Manager data source",
        "description": "Add an NSX-v Manager data source",
        "operationId": "addNsxvManagerDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NSXVManagerDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NSXVManagerDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List NSX-v Manager data sources",
        "description": "List NSX-v Manager data sources",
        "operationId": "listNsxvManagers",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:903:993642895",
                  "entity_type": "NSXVManagerDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxv-managers/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show NSX-v Manager data source details",
        "description": "Show NSX-v Manager data source details",
        "operationId": "getNsxvManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NSXVManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an NSX-v Manager data source",
        "description": "Update an NSX-v Manager data source",
        "operationId": "updateNsxvManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NSXVManagerDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NSXVManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an NSX-v Manager data source",
        "description": "Delete an NSX-v Manager data source",
        "operationId": "deleteNsxvManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxv-managers/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an NSX-v Manager data source",
        "description": "Enable an NSX-v Manager data source",
        "operationId": "enableNsxvManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxv-managers/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an NSX-v Manager data source",
        "description": "Disable an NSX-v Manager data source",
        "operationId": "disableNsxvManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/nsxv-managers/{id}/controller-cluster": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show NSX-v Controller Cluster details",
        "description": "Show NSX-v Controller Cluster details",
        "operationId": "getNsxvControllerCluster",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NSXControllerDataCollection"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update NSX-v Controller Cluster details",
        "description": "Update NSX-v Controller Cluster details",
        "operationId": "updateNsxvControllerCluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NSXControllerDataCollection"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NSXControllerDataCollection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/kubernetes-clusters": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an Kubernetes cluster data source",
        "description": "Add an Kubernetes cluster data source",
        "operationId": "addKubernetesDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/KubernetesDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/KubernetesDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Kubernetes cluster data sources",
        "description": "List Kubernetes cluster data sources",
        "operationId": "listKubernetesClusters",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:903:993642895",
                  "entity_type": "KubernetesDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/kubernetes-clusters/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Kubernetes cluster data source details",
        "description": "Show Kubernetes cluster data source details",
        "operationId": "getKubernetesCluster",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KubernetesDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an Kubernetes cluster data source",
        "description": "Update an Kubernetes cluster data source",
        "operationId": "updateKubernetesCluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/KubernetesDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KubernetesDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an Kubernetes cluster data source",
        "description": "Delete an Kubernetes cluster data source",
        "operationId": "deleteKubernetesCluster",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/kubernetes-clusters/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an Kubernetes cluster data source",
        "description": "Enable an Kubernetes cluster data source",
        "operationId": "enableKubernetesCluster",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/kubernetes-clusters/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an Kubernetes cluster data source",
        "description": "Disable an Kubernetes cluster data source",
        "operationId": "disableKubernetesCluster",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/openshift-clusters": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an OpenShift data source",
        "description": "Add an OpenShift data source",
        "operationId": "addOpenshiftDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/KubernetesDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/KubernetesDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List OpenShift data sources",
        "description": "List OpenShift data sources",
        "operationId": "listOpenshiftClusters",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:903:993642895",
                  "entity_type": "KubernetesDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/openshift-clusters/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show OpenShift cluster data source details",
        "description": "Show OpenShift data source details",
        "operationId": "getOpenshiftCluster",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KubernetesDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an OpenShift data source",
        "description": "Update an OpenShift data source",
        "operationId": "updateOpenshiftCluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/KubernetesDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KubernetesDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an OpenShift data source",
        "description": "Delete an OpenShift data source",
        "operationId": "deleteOpenshiftCluster",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/openshift-clusters/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an OpenShift data source",
        "description": "Enable an OpenShift data source",
        "operationId": "enableOpenshiftCluster",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/openshift-clusters/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an OpenShift data source",
        "description": "Disable an OpenShift data source",
        "operationId": "disableOpenshiftCluster",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/servicenow-instances": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an ServiceNow instance data source",
        "description": "Add an ServiceNow instance data source",
        "operationId": "addServiceNowDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ServiceNowDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ServiceNowDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List ServiceNow instance data sources",
        "description": "List ServiceNow instance data sources",
        "operationId": "listServiceNowInstances",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:903:993642895",
                  "entity_type": "ServiceNowDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/servicenow-instances/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show ServiceNow instance data source details",
        "description": "Show ServiceNow instance data source details",
        "operationId": "getServiceNowInstance",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceNowDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an ServiceNow instance data source",
        "description": "Update an ServiceNow instance data source",
        "operationId": "updateServiceNowInstance",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ServiceNowDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceNowDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an ServiceNow instance data source",
        "description": "Delete an ServiceNow instance data source",
        "operationId": "deleteServiceNowInstance",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/servicenow-instances/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an ServiceNow instance data source",
        "description": "Enable an ServiceNow instance data source",
        "operationId": "enableServiceNowInstance",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/servicenow-instances/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an ServiceNow instance data source",
        "description": "Disable an ServiceNow instance data source",
        "operationId": "disableServiceNowInstance",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/infoblox-managers": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an Infoblox DNS Manager data source",
        "description": "Add an Infoblox DNS Manager data source",
        "operationId": "addInfobloxManagerDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/InfobloxManagerDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/InfobloxManagerDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Infoblox DNS Manager data sources",
        "description": "List Infoblox DNS Manager data sources",
        "operationId": "listInfobloxManagers",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:903:993642895",
                  "entity_type": "InfobloxManagerDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/infoblox-managers/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Infoblox DNS Manager data source details",
        "description": "Show Infoblox DNS Manager data source details",
        "operationId": "getInfobloxManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InfobloxManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an Infoblox DNS Manager data source",
        "description": "Update an Infoblox DNS Manager data source",
        "operationId": "updateInfobloxManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/InfobloxManagerDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InfobloxManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an Infoblox DNS Manager data source",
        "description": "Delete an Infoblox DNS Manager data source",
        "operationId": "deleteInfobloxManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/infoblox-managers/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an Infoblox DNS Manager data source",
        "description": "Enable an Infoblox DNS Manager data source",
        "operationId": "enableInfobloxManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/infoblox-managers/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an Infoblox DNS Manager data source",
        "description": "Disable an Infoblox DNS Manager data source",
        "operationId": "disableInfobloxManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/vmc-nsxmanagers": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a VMC on AWS NSX Manager data source",
        "description": "Add a VMC on AWS NSX Manager data source",
        "operationId": "addPolicyManagerDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PolicyManagerDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PolicyManagerDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List VMC on AWS NSX Manager data sources",
        "description": "List VMC on AWS NSX Manager data sources",
        "operationId": "listPolicyManagers",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:928:993642895",
                  "entity_type": "PolicyManagerDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/vmc-nsxmanagers/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show VMC on AWS NSX Manager data source details",
        "description": "Show VMC on AWS NSX Manager data source details",
        "operationId": "getPolicyManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a VMC on AWS NSX Manager data source",
        "description": "Update a VMC on AWS NSX Manager data source",
        "operationId": "updatePolicyManager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PolicyManagerDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyManagerDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a VMC on AWS NSX Manager data source",
        "description": "Delete a VMC on AWS NSX Manager data source",
        "operationId": "deletePolicyManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/vmc-nsxmanagers/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a VMC on AWS NSX Manager data source",
        "description": "Enable a VMC on AWS NSX Manager data source",
        "operationId": "enablePolicyManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/vmc-nsxmanagers/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a VMC on AWS NSX Manager data source",
        "description": "Disable a VMC on AWS NSX Manager data source",
        "operationId": "disablePolicyManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/azure-subscriptions": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an Azure Cloud data source",
        "description": "Add an Azure Cloud data source",
        "operationId": "addAzureDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AzureDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AzureDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List Azure Cloud data sources",
        "description": "List Azure Cloud data sources",
        "operationId": "listAzureSubscriptions",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:966:993642895",
                  "entity_type": "AzureDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/azure-subscriptions/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show Azure Cloud data source details",
        "description": "Show Azure Cloud data source details",
        "operationId": "getAzureSubscriptions",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AzureDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an Azure Cloud data source",
        "description": "Update an Azure Cloud data source",
        "operationId": "updateAzureSubscription",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AzureDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AzureDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an Azure Cloud data source",
        "description": "Delete an Azure Cloud data source",
        "operationId": "deleteAzureSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/azure-subscriptions/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an Azure Cloud data source",
        "description": "Enable an Azure Cloud data source",
        "operationId": "enableAzureSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/azure-subscriptions/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an Azure Cloud data source",
        "description": "Disable an Azure Cloud data source",
        "operationId": "disableAzureSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hcx-connectors": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an VMware HCX data source",
        "description": "Add an VMware HCX data source",
        "operationId": "addHcxDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HcxDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/HcxDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List VMware HCX data sources",
        "description": "List VMware HCX data sources",
        "operationId": "listHcxs",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:1310:993642895",
                  "entity_type": "HcxDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hcx-connectors/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show VMware HCX data source details",
        "description": "Show VMware HCX data source details",
        "operationId": "getHcx",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HcxDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an VMware HCX data source",
        "description": "Update an VMware HCX data source",
        "operationId": "updateHcx",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HcxDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HcxDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an VMware HCX data source",
        "description": "Delete an VMware HCX data source",
        "operationId": "deleteHcx",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hcx-connectors/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an VMware HCX data source",
        "description": "Enable an VMware HCX data source",
        "operationId": "enableHcx",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/hcx-connectors/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an VMware HCX data source",
        "description": "Disable an VMware HCX data source",
        "operationId": "disableHcx",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/velocloud": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create a VMware SD-WAN by VeloCloud data source",
        "description": "Add a VMware SD-WAN by VeloCloud data source",
        "operationId": "addVeloCloudDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/VeloCloudDataSourceRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VeloCloudDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List VMware SD-WAN by VeloCloud data sources",
        "description": "List VMware SD-WAN by VeloCloud data sources",
        "operationId": "listVeloCloud",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:962:993642895",
                  "entity_type": "VeloCloudDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/velocloud/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show VMware SD-WAN by VeloCloud data source details",
        "description": "Show VMware SD-WAN by VeloCloud data source details",
        "operationId": "getVeloCloud",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VeloCloudDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update a VMware SD-WAN by VeloCloud data source",
        "description": "Update a VMware SD-WAN by VeloCloud data source",
        "operationId": "updateVeloCloud",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/VeloCloudDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VeloCloudDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete a VMware SD-WAN by VeloCloud data source",
        "description": "Delete a VMware SD-WAN by VeloCloud data source",
        "operationId": "deleteVeloCloud",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/velocloud/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable a VMware SD-WAN by VeloCloud data source",
        "description": "Enable a VMware SD-WAN by VeloCloud data source",
        "operationId": "enableVeloCloud",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/velocloud/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable a VMware SD-WAN by VeloCloud data source",
        "description": "Disable a VMware SD-WAN by VeloCloud data source",
        "operationId": "disableVeloCloud",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/aws-accounts": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Create an AWS data source",
        "description": "Create an AWS data source",
        "operationId": "addAWSDatasource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AWSDataSource"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AWSDataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Already Exists"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "List AWS data sources",
        "description": "List AWS data sources",
        "operationId": "listAWSDataSources",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "10000:916:993642895",
                  "entity_type": "AWSDataSource"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/aws-accounts/{id}": {
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Show AWS data source details",
        "description": "Show AWS data source details",
        "operationId": "getAWSDataSource",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AWSDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Update an AWS data source",
        "description": "Update an AWS data source",
        "operationId": "updateAWSDataSource",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AWSDataSource"
            }
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AWSDataSource"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Delete an AWS data source",
        "description": "Delete an AWS data source",
        "operationId": "deleteAWSDataSource",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/aws-accounts/{id}/enable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Enable an AWS data source",
        "description": "Enable an AWS data source",
        "operationId": "enableAWSDataSource",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/data-sources/aws-accounts/{id}/disable": {
      "post": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disable an AWS data source",
        "description": "Disable an AWS data source",
        "operationId": "disableAWSDataSource",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/problems": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List problems",
        "description": "List problem events.",
        "operationId": "listProblemEvents",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          },
          {
            "$ref": "#/parameters/EventType"
          },
          {
            "$ref": "#/parameters/EventTags"
          },
          {
            "$ref": "#/parameters/EventStatus"
          },
          {
            "$ref": "#/parameters/UpdateTimeFrom"
          },
          {
            "$ref": "#/parameters/UpdateTimeTo"
          },
          {
            "$ref": "#/parameters/EventSeverityList"
          },
          {
            "$ref": "#/parameters/EventManagers"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:35230:1233393386",
                  "entity_type": "ProblemEvent",
                  "time": 1509283820
                },
                {
                  "entity_id": "18230:35228:1832167524",
                  "entity_type": "ProblemEvent",
                  "time": 1509285022
                }
              ],
              "cursor": "MTA=",
              "total_count": 15,
              "start_time": 1509231996,
              "end_time": 1509318396
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/problems/fetch": {
      "post": {
        "tags": [
          "Entities"
        ],
        "summary": "Get details of problem events",
        "description": "Bulk fetch of problems. Max batch size is 1000.",
        "operationId": "bulkFetchProblemEvents",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/FetchRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BulkProblemFetchResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/problems/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show problem details",
        "description": "Show problem event details.",
        "operationId": "getProblemEvent",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProblemEvent"
            },
            "examples": {
              "entity_id": "18230:36050:1583312594",
              "name": "NSXFirewallDefaultAllowAllRulesEvent",
              "entity_type": "ProblemEvent",
              "anchor_entities": [
                {
                  "entity_id": "18230:39:660899929",
                  "entity_type": "NSXDistributedFirewall"
                }
              ],
              "related_entities": [
                {
                  "entity_id": "18230:7:824494449",
                  "entity_type": "NSXVManager"
                },
                {
                  "entity_id": "18230:87:367271162",
                  "entity_type": "NSXFirewallRule"
                },
                {
                  "entity_id": "18230:39:660899929",
                  "entity_type": "NSXDistributedFirewall"
                }
              ],
              "message": "The distributed firewall is configured to allow all traffic by default, which increases the potential attack surface of the network",
              "event_tags": [
                "Best Practices",
                "Firewall"
              ],
              "admin_state": "ENABLED",
              "archived": false,
              "event_time_epoch_ms": 1509283819834,
              "severity": "INFO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vms": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List vms",
        "description": "List vms",
        "operationId": "listVms",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:1:1158969162",
                  "entity_type": "VirtualMachine",
                  "time": 1509283414
                },
                {
                  "entity_id": "18230:1:875338851",
                  "entity_type": "VirtualMachine",
                  "time": 1509283476
                }
              ],
              "cursor": "MTA=",
              "total_count": 39,
              "start_time": 1509335034,
              "end_time": 1509335034
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vms/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show VM details",
        "description": "Show VM details",
        "operationId": "getVm",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseVirtualMachine"
            },
            "examples": {
              "entity_id": "18230:1:1158969162",
              "name": "NSX_Controller_9e80ec74-57ce-4671-8fd7-b5884a997535",
              "entity_type": "VirtualMachine",
              "ip_addresses": [
                {
                  "ip_address": "10.197.17.74",
                  "netmask": "255.255.255.0",
                  "network_address": "10.197.17.0/24"
                }
              ],
              "default_gateway": "",
              "vnics": [
                {
                  "entity_id": "18230:18:863301374",
                  "entity_type": "Vnic"
                }
              ],
              "security_groups": [

              ],
              "source_firewall_rules": [

              ],
              "destination_firewall_rules": [

              ],
              "ip_sets": [

              ],
              "cluster": {
                "entity_id": "18230:66:1293137396",
                "entity_type": "Cluster"
              },
              "resource_pool": {
                "entity_id": "18230:79:313158344",
                "entity_type": "ResourcePool"
              },
              "security_tags": [

              ],
              "layer2_networks": [

              ],
              "host": {
                "entity_id": "18230:4:652218965",
                "entity_type": "Host"
              },
              "vlans": [

              ],
              "vendor_id": "vm-181",
              "vcenter_manager": {
                "entity_id": "18230:8:2048038620",
                "entity_type": "VCenterManager"
              },
              "folders": [
                {
                  "entity_id": "18230:81:520432789",
                  "entity_type": "Folder"
                }
              ],
              "datastores": [
                {
                  "entity_id": "18230:80:682061552",
                  "entity_type": "Datastore"
                }
              ],
              "datacenter": {
                "entity_id": "18230:105:1663983066",
                "entity_type": "VCDatacenter"
              },
              "nsx_manager": null,
              "source_inversion_rules": [

              ],
              "destination_inversion_rules": [

              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/fetch": {
      "post": {
        "tags": [
          "Entities"
        ],
        "summary": "Get details of entities",
        "description": "Bulk fetch of entity details using a list of entity IDs. Max batch size is 1000.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/FetchRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BulkFetchResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vnics": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List vnics",
        "description": "List vnics attached to virtual machines",
        "operationId": "listVnics",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:18:1158969162",
                  "entity_type": "Vnic",
                  "time": 1509283414
                },
                {
                  "entity_id": "18230:18:875338851",
                  "entity_type": "Vnic",
                  "time": 1509283476
                }
              ],
              "cursor": "MTA=",
              "total_count": 39,
              "start_time": 1509335034,
              "end_time": 1509335034
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vnics/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show vNIC details",
        "description": "Show vNIC details",
        "operationId": "getVnic",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseVnic"
            },
            "examples": {
              "entity_id": "18230:18:1285494944",
              "name": "[USA  Edge-0]-[Network adapter 8]",
              "entity_type": "Vnic",
              "ip_addresses": [

              ],
              "layer2_network": null,
              "vlan": {
                "begin": 0,
                "end": 0
              },
              "vm": {
                "entity_id": "18230:1:1158972882",
                "entity_type": "VirtualMachine"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/hosts": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List hosts",
        "description": "List vSphere hosts",
        "operationId": "listHosts",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:4:652218965",
                  "entity_type": "Host",
                  "time": 1509283414
                },
                {
                  "entity_id": "18230:4:1256074202",
                  "entity_type": "Host",
                  "time": 1509283414
                }
              ],
              "cursor": null,
              "total_count": 6,
              "start_time": 1509336095,
              "end_time": 1509336095
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/hosts/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show host details",
        "description": "Show vSphere host details",
        "operationId": "getHost",
        "parameters": [
          {
            "$ref": "#/parameters/Time"
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Host"
            },
            "examples": {
              "entity_id": "18230:4:1256074202",
              "name": "10.197.17.228",
              "entity_type": "Host",
              "vmknics": [
                {
                  "entity_id": "18230:17:1776349286",
                  "entity_type": "Vmknic"
                }
              ],
              "cluster": {
                "entity_id": "18230:66:1293137396",
                "entity_type": "Cluster"
              },
              "vcenter_manager": {
                "entity_id": "18230:8:2048038620",
                "entity_type": "VCenterManager"
              },
              "vm_count": 0,
              "datastores": [
                {
                  "entity_id": "18230:80:330903629",
                  "entity_type": "Datastore"
                }
              ],
              "service_tag": "VMware-42 14 cd 9f f0 c8 0f 77-6a 53 71 8c 6d d6 e3 ff",
              "vendor_id": "host-202",
              "nsx_manager": null,
              "maintenance_mode": "NOTINMAINTENANCEMODE",
              "connection_state": "CONNECTED"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/clusters": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List clusters",
        "description": "List vSphere clusters",
        "operationId": "listClusters",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:66:1293137396",
                  "entity_type": "Cluster",
                  "time": 1509282803
                },
                {
                  "entity_id": "18230:66:670818039",
                  "entity_type": "Cluster",
                  "time": 1509284911
                }
              ],
              "cursor": null,
              "total_count": 4,
              "start_time": 1509337200,
              "end_time": 1509337200
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/clusters/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show cluster details",
        "description": "Show vSphere cluster details",
        "operationId": "getCluster",
        "parameters": [
          {
            "$ref": "#/parameters/Time"
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cluster"
            },
            "examples": {
              "entity_id": "18230:66:1293137396",
              "name": "Cluster1",
              "entity_type": "Cluster",
              "total_cpus": 88400,
              "total_memory": 68717867008,
              "num_cpu_cores": 34,
              "vendor_id": "domain-c7",
              "num_hosts": 3,
              "num_datastores": 3,
              "nsx_manager": null,
              "vcenter_manager": {
                "entity_id": "18230:8:2048038620",
                "entity_type": "VCenterManager"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vc-datacenters": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List vCenter datacenters",
        "description": "List vCenter datacenters",
        "operationId": "listDatacenters",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:105:192022336",
                  "entity_type": "VCDatacenter",
                  "time": 1509282871
                },
                {
                  "entity_id": "18230:105:1663983066",
                  "entity_type": "VCDatacenter",
                  "time": 1509282803
                }
              ],
              "cursor": null,
              "total_count": 2,
              "start_time": 1509337402,
              "end_time": 1509337402
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vc-datacenters/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show vCenter datacenter details",
        "description": "Show vCenter datacenter details",
        "operationId": "getDatacenter",
        "parameters": [
          {
            "$ref": "#/parameters/Time"
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VCDatacenter"
            },
            "examples": {
              "entity_id": "18230:105:192022336",
              "name": "DataCenter",
              "entity_type": "VCDatacenter",
              "vendor_id": "datacenter-2",
              "vcenter_manager": {
                "entity_id": "18230:8:824494514",
                "entity_type": "VCenterManager"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/folders": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List folders",
        "description": "List vCenter folders",
        "operationId": "listFolders",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:81:591055243",
                  "entity_type": "Folder",
                  "time": 1509282871
                },
                {
                  "entity_id": "18230:81:520432789",
                  "entity_type": "Folder",
                  "time": 1509282804
                }
              ],
              "cursor": "MTA=",
              "total_count": 14,
              "start_time": 1509337459,
              "end_time": 1509337459
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/folders/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show folder details",
        "description": "Show vCenter folder details",
        "operationId": "getFolder",
        "parameters": [
          {
            "$ref": "#/parameters/Time"
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Folder"
            },
            "examples": {
              "entity_id": "18230:81:591055243",
              "name": "datastore",
              "entity_type": "Folder",
              "vendor_id": "group-s5",
              "vcenter_manager": {
                "entity_id": "18230:8:824494514",
                "entity_type": "VCenterManager"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/datastores": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List datastores",
        "description": "List vSphere datastores",
        "operationId": "listDatastores",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:80:1756900216",
                  "entity_type": "Datastore",
                  "time": 1509282874
                },
                {
                  "entity_id": "18230:80:682061552",
                  "entity_type": "Datastore",
                  "time": 1509282819
                }
              ],
              "cursor": null,
              "total_count": 6,
              "start_time": 1509337523,
              "end_time": 1509337523
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/datastores/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show datastore details",
        "description": "Show vSphere datastore details",
        "operationId": "getDatastore",
        "parameters": [
          {
            "$ref": "#/parameters/Time"
          },
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Datastore"
            },
            "examples": {
              "entity_id": "18230:80:1756898449",
              "name": "datastore1 (2)",
              "entity_type": "Datastore",
              "vendor_id": "datastore-33",
              "vcenter_manager": {
                "entity_id": "18230:8:824494514",
                "entity_type": "VCenterManager"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vmknics": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List vmknics",
        "description": "List ESXi host vmknics",
        "operationId": "listVmknics",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:17:1928372608",
                  "entity_type": "Vmknic",
                  "time": 1509283321
                },
                {
                  "entity_id": "18230:17:695819318",
                  "entity_type": "Vmknic",
                  "time": 1509282819
                }
              ],
              "cursor": "MTA=",
              "total_count": 11,
              "start_time": 1509337586,
              "end_time": 1509337586
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vmknics/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show vmknic details",
        "description": "Show ESXi host vmknic details",
        "operationId": "getVmknic",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Vmknic"
            },
            "examples": {
              "entity_id": "18230:17:695819318",
              "name": "[10.197.17.64]-[vmk0]",
              "entity_type": "Vmknic",
              "ip_addresses": [
                {
                  "ip_address": "10.197.17.64",
                  "netmask": "255.255.252.0",
                  "network_address": "10.197.16.0/22"
                }
              ],
              "vlan": {
                "begin": 0,
                "end": 0
              },
              "host": {
                "entity_id": "18230:4:652218965",
                "entity_type": "Host"
              },
              "layer2_network": null
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/layer2-networks": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List layer2 networks",
        "description": "List layer2 networks (VLANs, VXLANs)",
        "operationId": "listLayer2Networks",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:11:2095237606",
                  "entity_type": "VxlanLayer2Network",
                  "time": 1509284850
                },
                {
                  "entity_id": "18230:11:2095237668",
                  "entity_type": "VxlanLayer2Network",
                  "time": 1509284850
                }
              ],
              "cursor": "MTA=",
              "total_count": 38,
              "start_time": 1509339711,
              "end_time": 1509339711
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/layer2-networks/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show layer2 network details",
        "description": "Show layer2 network details",
        "operationId": "getLayer2Network",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseL2Network"
            },
            "examples": {
              "entity_id": "18230:11:2095237606",
              "name": "Deccan-uplink-vxlan",
              "entity_type": "VxlanLayer2Network",
              "network_addresses": [
                "192.168.13.0/24"
              ],
              "gateways": [

              ],
              "segment_id": 5004,
              "vteps": [
                {
                  "entity_id": "18230:17:695819287",
                  "entity_type": "Vmknic"
                },
                {
                  "entity_id": "18230:17:431576805",
                  "entity_type": "Vmknic"
                }
              ],
              "scope": "GLOBAL",
              "nsx_managers": [

              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/ip-sets": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List NSX IP Sets",
        "description": "List NSX IP Sets",
        "operationId": "listIPSets",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:84:347816011",
                  "entity_type": "NSXIPSet",
                  "time": 1509283320
                }
              ],
              "cursor": null,
              "total_count": 3,
              "start_time": 1509339942,
              "end_time": 1509339942
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/ip-sets/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show NSX IP Set details",
        "description": "Show NSX IP Set details",
        "operationId": "getIPSet",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseIPSet"
            },
            "examples": {
              "entity_id": "18230:84:347816011",
              "name": "IPSET_ford",
              "entity_type": "NSXIPSet",
              "ip_addresses": [

              ],
              "ip_ranges": [
                {
                  "start_ip": "192.168.78.21",
                  "end_ip": "192.168.78.30"
                }
              ],
              "ip_numeric_ranges": [
                {
                  "start": 3232255509,
                  "end": 3232255518
                }
              ],
              "parent_security_groups": [

              ],
              "direct_source_rules": [

              ],
              "direct_destination_rules": [

              ],
              "indirect_source_rules": [

              ],
              "indirect_destination_rules": [

              ],
              "vendor_id": "ipset-3",
              "vendor": "",
              "nsx_managers": [
                {
                  "entity_id": "18230:7:824494449",
                  "entity_type": "NSXVManager"
                }
              ],
              "scope": "GLOBAL"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/flows": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List flows",
        "description": "List network traffic flows",
        "operationId": "getFlows",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "10000:515:1491521924",
                  "entity_type": "Flow",
                  "time": 1509283320
                }
              ],
              "cursor": null,
              "total_count": 3,
              "start_time": 1509339942,
              "end_time": 1509339942
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/flows/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show flow details",
        "description": "Show network traffic flow details",
        "operationId": "getFlow",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Flow"
            },
            "examples": {
              "entity_id": "10000:515:1491521924",
              "name": "10.197.53.40 -> 10.197.53.38 [port:500]",
              "entity_type": "Flow",
              "source_ip": {
                "ip_address": "10.197.53.40",
                "netmask": "255.255.255.255",
                "network_address": "10.197.53.40"
              },
              "destination_ip": {
                "ip_address": "10.197.53.38",
                "netmask": "255.255.255.255",
                "network_address": "10.197.53.38"
              },
              "port": {
                "start": 500,
                "end": 500,
                "display": "500",
                "iana_name": "isakmp",
                "iana_port_display": "500 [isakmp]"
              },
              "source_folders": [

              ],
              "destination_folders": [

              ],
              "protocol": "UDP",
              "source_ip_sets": [

              ],
              "destination_ip_sets": [

              ],
              "source_security_groups": [

              ],
              "destination_security_groups": [

              ],
              "traffic_type": "EAST_WEST_TRAFFIC",
              "source_security_tags": [

              ],
              "destination_security_tags": [

              ],
              "source_vm_tags": [

              ],
              "destination_vm_tags": [

              ],
              "within_host": false,
              "firewall_action": "ALLOW",
              "firewall_rule_id": [

              ],
              "flow_tag": [
                "EAST_WEST_TRAFFIC",
                "PHY_PHY_TRAFFIC",
                "SRC_IP_PHYSICAL"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/security-groups": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List security groups",
        "description": "List security groups (NSX, AWS, all security groups)",
        "operationId": "listSecurityGroups",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:82:1504518253",
                  "entity_type": "NSXSecurityGroup",
                  "time": 1509283316
                },
                {
                  "entity_id": "18230:82:604574196",
                  "entity_type": "NSXSecurityGroup",
                  "time": 1509284912
                }
              ],
              "cursor": null,
              "total_count": 9,
              "start_time": 1509340012,
              "end_time": 1509340012
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/security-groups/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show security group details",
        "description": "Show security group details",
        "operationId": "getSecurityGroup",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseSecurityGroup"
            },
            "examples": {
              "entity_id": "18230:82:604574196",
              "name": "SG-TestApp-Web",
              "entity_type": "NSXSecurityGroup",
              "members": [
                {
                  "entity_id": "18230:99:922343691",
                  "entity_type": "SecurityTag"
                }
              ],
              "direct_source_rules": [

              ],
              "direct_destination_rules": [

              ],
              "indirect_source_rules": [

              ],
              "indirect_destination_rules": [

              ],
              "parents": [

              ],
              "direct_members": [
                {
                  "entity_id": "18230:99:922343691",
                  "entity_type": "SecurityTag"
                }
              ],
              "vendor_id": "securitygroup-25",
              "excluded_members": [

              ],
              "nsx_managers": [
                {
                  "entity_id": "18230:7:824494449",
                  "entity_type": "NSXVManager"
                }
              ],
              "scope": "GLOBAL",
              "ip_sets": [

              ],
              "security_tags": [
                {
                  "entity_id": "18230:99:922343691",
                  "entity_type": "SecurityTag"
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/security-tags": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List security tags",
        "description": "List security tags",
        "operationId": "listSecurityTags",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:99:922344652",
                  "entity_type": "SecurityTag",
                  "time": 1509283319
                },
                {
                  "entity_id": "18230:99:1830868297",
                  "entity_type": "SecurityTag",
                  "time": 1509283318
                }
              ],
              "cursor": "MTA=",
              "total_count": 14,
              "start_time": 1509340096,
              "end_time": 1509340096
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/security-tags/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show security tag details",
        "description": "Show security tag details",
        "operationId": "getSecurityTag",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SecurityTag"
            },
            "examples": {
              "entity_id": "18230:99:922344652",
              "name": "IDS_IPS.threat=medium",
              "entity_type": "SecurityTag",
              "description": "Tag indicates that the data violation detected has a medium threat level",
              "direct_security_groups": [

              ],
              "security_groups": [

              ],
              "vendor_id": "securitytag-10",
              "nsx_manager": {
                "entity_id": "18230:7:824494449",
                "entity_type": "NSXVManager"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/firewall-rules": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List firewall rules",
        "description": "List firewall rules for NSX, AWS, Azure, physical firewalls, anything that has firewall rules",
        "operationId": "listFirewallRules",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:87:367271162",
                  "entity_type": "NSXFirewallRule",
                  "time": 1509283319
                },
                {
                  "entity_id": "18230:87:367270232",
                  "entity_type": "NSXFirewallRule",
                  "time": 1509283319
                }
              ],
              "cursor": null,
              "total_count": 7,
              "start_time": 1509344618,
              "end_time": 1509344618
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/firewall-rules/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show firewall rule details",
        "description": "Show firewall rule details",
        "operationId": "getFirewallRule",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseFirewallRule"
            },
            "examples": {
              "entity_id": "18230:87:367271162",
              "name": "Default Rule",
              "entity_type": "NSXFirewallRule",
              "rule_id": "1001",
              "section_id": "1003",
              "section_name": "Default Section Layer3",
              "sequence_number": 6,
              "source_any": true,
              "destination_any": true,
              "service_any": true,
              "sources": [

              ],
              "destinations": [

              ],
              "services": [

              ],
              "action": "ALLOW",
              "disabled": false,
              "source_inversion": false,
              "destination_inversion": false,
              "port_ranges": [
                {
                  "start": 0,
                  "end": 65535,
                  "display": "0-65535 (ANY)",
                  "iana_name": "",
                  "iana_port_display": ""
                }
              ],
              "logging_enabled": false,
              "direction": "INOUT",
              "scope": "GLOBAL",
              "nsx_managers": [
                {
                  "entity_id": "18230:7:824494449",
                  "entity_type": "NSXVManager"
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/firewalls": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List firewalls",
        "description": "List firewalls",
        "operationId": "listFirewalls",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:39:660899929",
                  "entity_type": "NSXDistributedFirewall",
                  "time": 1509283319
                }
              ],
              "cursor": null,
              "total_count": 1,
              "start_time": 1509344618,
              "end_time": 1509344618
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/firewalls/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show firewall details",
        "description": "Show firewall details",
        "operationId": "getFirewall",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseFirewallRule"
            },
            "examples": {
              "entity_id": "18230:39:660899929",
              "name": "NSX Firewall",
              "entity_type": "NSXDistributedFirewall",
              "firewall_rules": [
                {
                  "rules": [

                  ],
                  "rule_set_type": "NSX_STANDARD"
                },
                {
                  "rules": [

                  ]
                }
              ],
              "exclusions": [
                {
                  "entity_id": "18230:1:875338882",
                  "entity_type": "VirtualMachine"
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/services": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List services",
        "description": "List services (used in firewall rules)",
        "operationId": "listServices",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:85:503995168",
                  "entity_type": "NSXService",
                  "time": 1509283319
                }
              ],
              "cursor": null,
              "total_count": 1,
              "start_time": 1509344618,
              "end_time": 1509344618
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/services/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show service details",
        "description": "Show service details",
        "operationId": "getService",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseService"
            },
            "examples": {
              "entity_id": "18230:85:503995168",
              "name": "PostgresSQL",
              "entity_type": "NSXService",
              "protocol": "TCP",
              "port_ranges": [
                {
                  "start": 5432,
                  "end": 5432,
                  "display": "5432",
                  "iana_name": "",
                  "iana_port_display": ""
                }
              ],
              "nsx_managers": [
                {
                  "entity_id": "18230:7:824494449",
                  "entity_type": "NSXVManager"
                }
              ],
              "scope": "GLOBAL",
              "vendor_id": "application-211"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/service-groups": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List service groups",
        "description": "List service groups (used in firewall rules)",
        "operationId": "listServiceGroups",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:86:1504518253",
                  "entity_type": "NSXServiceGroup",
                  "time": 1509283319
                }
              ],
              "cursor": null,
              "total_count": 1,
              "start_time": 1509344618,
              "end_time": 1509344618
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/service-groups/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show service group details",
        "description": "Show service group details (used in firewall rules)",
        "operationId": "getServiceGroup",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseServiceGroup"
            },
            "examples": {
              "entity_id": "18230:86:505347433",
              "name": "Oracle Enterprise Manager",
              "entity_type": "NSXServiceGroup",
              "members": [
                {
                  "entity_id": "18230:85:676477656",
                  "entity_type": "NSXService"
                },
                {
                  "entity_id": "18230:85:503998082",
                  "entity_type": "NSXService"
                },
                {
                  "entity_id": "18230:85:504027904",
                  "entity_type": "NSXService"
                },
                {
                  "entity_id": "18230:85:676474897",
                  "entity_type": "NSXService"
                }
              ],
              "scope": "GLOBAL",
              "nsx_managers": [
                {
                  "entity_id": "18230:7:824494449",
                  "entity_type": "NSXVManager"
                }
              ],
              "vendor_id": "applicationgroup-23"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vcenter-managers": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List vCenter managers",
        "description": "List vCenter managers",
        "operationId": "listVcenterManagers",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:8:2048038620",
                  "entity_type": "VCenterManager",
                  "time": 1509282805
                },
                {
                  "entity_id": "18230:8:824494514",
                  "entity_type": "VCenterManager",
                  "time": 1509283017
                }
              ],
              "cursor": null,
              "total_count": 2,
              "start_time": 1509344794,
              "end_time": 1509344794
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vcenter-managers/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show vCenter manager details",
        "description": "Show vCenter manager details",
        "operationId": "getVcenterManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VCenterManager"
            },
            "examples": {
              "entity_id": "18230:8:2048038620",
              "name": "10.197.17.68",
              "entity_type": "VCenterManager",
              "ip_address": {
                "ip_address": "10.197.17.68",
                "netmask": "255.255.255.255",
                "network_address": "10.197.17.68/32"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/nsx-managers": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List NSX managers",
        "description": "List NSX managers",
        "operationId": "listNSXManagers",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:7:824494449",
                  "entity_type": "NSXVManager",
                  "time": 1509339744
                }
              ],
              "cursor": null,
              "total_count": 1,
              "start_time": 1509345346,
              "end_time": 1509345346
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/nsx-managers/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show NSX manager details",
        "description": "Show NSX manager details",
        "operationId": "getNSXManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseNSXManager"
            },
            "examples": {
              "entity_id": "18230:7:824494449",
              "name": "10.197.53.187",
              "entity_type": "NSXVManager",
              "ip_address": {
                "ip_address": "10.197.53.187",
                "netmask": "255.255.255.255",
                "network_address": "10.197.53.187/32"
              },
              "version": "6.2.8",
              "role": "STANDALONE"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/firewall-managers": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List firewall managers",
        "description": "List firewall managers",
        "operationId": "listFirewallManagers",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:313:173836586",
                  "entity_type": "CheckpointManager",
                  "time": 1509339744
                }
              ],
              "cursor": null,
              "total_count": 1,
              "start_time": 1509345346,
              "end_time": 1509345346
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/firewall-managers/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show firewall manager details",
        "description": "Show firewall manager details",
        "operationId": "getFirewallManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseFirewallManager"
            },
            "examples": {
              "entity_id": "18230:313:824494449",
              "name": "10.197.53.187",
              "entity_type": "CheckpointManager",
              "ip_address": {
                "ip_address": "10.197.53.187",
                "netmask": "255.255.255.255",
                "network_address": "10.197.53.187/32"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/distributed-virtual-switches": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List distributed virtual switches",
        "description": "List distributed virtual switches",
        "operationId": "listDistributedVirtualSwitches",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:2:161257049",
                  "entity_type": "DistributedVirtualSwitch",
                  "time": 1509282885
                },
                {
                  "entity_id": "18230:2:368016825",
                  "entity_type": "DistributedVirtualSwitch",
                  "time": 1509282854
                }
              ],
              "cursor": null,
              "total_count": 2,
              "start_time": 1509345426,
              "end_time": 1509345426
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/distributed-virtual-switches/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show distributed virtual switch details",
        "description": "Show distributed virtual switch details",
        "operationId": "getDistributedVirtualSwitch",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DistributedVirtualSwitch"
            },
            "examples": {
              "entity_id": "18230:2:161257049",
              "name": "dvSwitch",
              "entity_type": "DistributedVirtualSwitch",
              "vendor_id": "dvs-21",
              "vcenter_manager": {
                "entity_id": "18230:8:824494514",
                "entity_type": "VCenterManager"
              },
              "hosts": [
                {
                  "entity_id": "18230:4:1528136654",
                  "entity_type": "Host"
                },
                {
                  "entity_id": "18230:4:1528138514",
                  "entity_type": "Host"
                },
                {
                  "entity_id": "18230:4:1528136747",
                  "entity_type": "Host"
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/distributed-virtual-portgroups": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List distributed virtual portgroups",
        "description": "List distributed virtual portgroups",
        "operationId": "listDistributedVirtualPortgroups",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:3:187309184",
                  "entity_type": "DistributedVirtualPortgroup",
                  "time": 1509282847
                },
                {
                  "entity_id": "18230:3:1603334983",
                  "entity_type": "DistributedVirtualPortgroup",
                  "time": 1509282885
                }
              ],
              "cursor": "MTA=",
              "total_count": 46,
              "start_time": 1509345514,
              "end_time": 1509345514
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/distributed-virtual-portgroups/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show distributed virtual portgroup details",
        "description": "Show distributed virtual portgroup details",
        "operationId": "getDistributedVirtualPortgroup",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DistributedVirtualPortgroup"
            },
            "examples": {
              "entity_id": "18230:3:187309184",
              "name": "vxw-dvs-15-virtualwire-18-sid-5017-swargate end VM vxlan",
              "entity_type": "DistributedVirtualPortgroup",
              "vendor_id": "dvportgroup-92",
              "vcenter_manager": {
                "entity_id": "18230:8:2048038620",
                "entity_type": "VCenterManager"
              },
              "distributed_virtual_switch": {
                "entity_id": "18230:2:368016825",
                "entity_type": "DistributedVirtualSwitch"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/names": {
      "post": {
        "tags": [
          "Entities"
        ],
        "summary": "Get names for entities",
        "description": "Get names for entities.Limit of 1000 entities in a single request.",
        "operationId": "getNames",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Names Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NamesRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NamesResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/names/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get name of an entity",
        "description": "Get name of an entity",
        "operationId": "getName",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityName"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/azure-subscriptions": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List Microsoft Azure Subscriptions",
        "description": "List Microsoft Azure Subscriptions",
        "operationId": "listAzureSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:1708:824494449",
                  "entity_type": "AzureSubscription",
                  "time": 1509339744
                }
              ],
              "cursor": null,
              "total_count": 1,
              "start_time": 1509345346,
              "end_time": 1509345346
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/azure-subscriptions/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show Microsoft Azure Subscription details",
        "description": "Show Microsoft Azure Subscription details",
        "operationId": "getAzureSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AzureSubscription"
            },
            "examples": {
              "entity_id": "18230:1708:824494449",
              "name": "10.197.53.187",
              "entity_type": "AzureSubscription",
              "manager": null,
              "vendor_id": 12344
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/aws-account-managers": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List AWS Account managers",
        "description": "List AWS Account managers",
        "operationId": "listAWSAccountManagers",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:612:824494449",
                  "entity_type": "AWSAccountManager",
                  "time": 1509339744
                }
              ],
              "cursor": null,
              "total_count": 1,
              "start_time": 1509345346,
              "end_time": 1509345346
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/aws-account-managers/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show AWS Account manager details",
        "description": "Show AWS Account manager details",
        "operationId": "getAWSAccountManager",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AWSAccountManager"
            },
            "examples": {
              "entity_id": "18230:612:824494449",
              "name": "10.197.53.187",
              "entity_type": "AWSAccountManager",
              "manager": null,
              "vendor_id": 12344
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get metric points for an entity",
        "description": "Get metric points for an entity for an entity id and metric for a given time interval. Maximum number of metrics point returned by API is 300. In case the interval and time period combination have more than 300 metrics points, client should break the time period to multiple batches to get all the metrics points. These metric points are the points inside the metric charts (CPU, network rate, etc.)",
        "operationId": "getMetrics",
        "parameters": [
          {
            "name": "entity_id",
            "in": "query",
            "description": "entity type",
            "required": true,
            "type": "string"
          },
          {
            "name": "metric",
            "in": "query",
            "description": "metric name",
            "required": true,
            "type": "string"
          },
          {
            "name": "interval",
            "in": "query",
            "description": "metric points interval",
            "required": true,
            "type": "integer"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start time for query in epoch seconds",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end time for query in epoch seconds",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MetricResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/schema/{entity-type}/metrics": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Get metrics schema for an entity type",
        "description": "Get details of metrics available for entity type",
        "operationId": "getMetricsSchema",
        "parameters": [
          {
            "name": "entity-type",
            "in": "path",
            "description": "entity type",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityMetricsSchema"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create an application",
        "description": "Application is a group of tiers. A tier is a group of virtual machines or IP addresses based on membership criteria. Tiers are bound to a single\napplication. An application name is unique and should not conflict with another application name.",
        "operationId": "addApplication",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Application"
            },
            "examples": {
              "entity_id": "18230:561:271275765",
              "name": "App-1",
              "entity_type": "Application",
              "create_time": 1509410056733,
              "created_by": "admin@local",
              "last_modified_time": 0,
              "last_modified_by": ""
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List applications",
        "description": "List applications in vRealize Network Insight",
        "operationId": "listApplications",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "name": "modifiedAfter",
            "in": "query",
            "required": false,
            "description": "timestamp after which apps has been modified",
            "type": "number"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:561:271275765",
                  "entity_type": "Application"
                }
              ],
              "total_count": 1
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/{id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Show application details",
        "description": "Show application details for an entity ID. This returns the application name.",
        "operationId": "getApplication",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Application"
            },
            "examples": {
              "entity_id": "18230:561:271275765",
              "name": "App-1",
              "entity_type": "Application",
              "create_time": 1509410056733,
              "created_by": "admin@local",
              "last_modified_time": 0,
              "last_modified_by": ""
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete an application",
        "description": "Deleting an application deletes all the tiers of the application along with the application",
        "operationId": "deleteApplication",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/{id}/problems": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Application problems",
        "description": "List Application problem events.",
        "operationId": "getAppProblems",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          },
          {
            "$ref": "#/parameters/EventType"
          },
          {
            "$ref": "#/parameters/EventTags"
          },
          {
            "$ref": "#/parameters/EventStatus"
          },
          {
            "$ref": "#/parameters/UpdateTimeFrom"
          },
          {
            "$ref": "#/parameters/UpdateTimeTo"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:35230:1233393386",
                  "entity_type": "ProblemEvent",
                  "time": 1509283820
                },
                {
                  "entity_id": "18230:35228:1832167524",
                  "entity_type": "ProblemEvent",
                  "time": 1509285022
                }
              ],
              "cursor": "MTA=",
              "total_count": 15,
              "start_time": 1509231996,
              "end_time": 1509318396
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/{id}/members/vms": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Show application members",
        "description": "Show application members",
        "operationId": "getApplicationVms",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationMembers"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/members": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Get member details of applications",
        "description": "Get member details of applications",
        "operationId": "getApplicationsMembers",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupsMembersRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationsMembersResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/tiers/members": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Get member details of tiers",
        "description": "Get member details of tiers",
        "operationId": "getTiersMembers",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupsMembersRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TiersMembersResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/{id}/flow-summary": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Show application flow summary",
        "description": "Show application details",
        "operationId": "getApplicationFlowSummary",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationFlowSummary"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/{id}/flow-props": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get application flow properties",
        "description": "Get application flow properties e.g flow count, count of interent flows etc",
        "operationId": "getAppFlowProperties",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          },
          {
            "in": "query",
            "name": "props",
            "description": "List of properties to include",
            "required": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppFlowPropEnum"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationFlowData"
            },
            "examples": {
              "results": {
                "application_id": "10000:561:1234567890",
                "flow_data": [
                  {
                    "name": "COUNT",
                    "value": 100
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/{id}/flow-metrics": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get application flow metrics",
        "description": "Get application flow properties sum of bytes of incoming and outgoing flows",
        "operationId": "getAppFlowMetrics",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          },
          {
            "in": "query",
            "name": "metrics",
            "description": "List of metrics to include",
            "required": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppFlowMetricEnum"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationFlowData"
            },
            "examples": {
              "results": {
                "application_id": "10000:561:1234567890",
                "flow_data": [
                  {
                    "name": "INCOMING_BYTES",
                    "value": 100
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/{id}/top-talking-member": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Application top talking members",
        "description": "List Application top talking members based on provided criteria",
        "operationId": "getAppTopTalkingMembers",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          },
          {
            "in": "query",
            "name": "sort_criteria",
            "description": "Sorting criteria",
            "required": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/TopTalkerSortEnum"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationTopTalkingMemberData"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:1702:1233393386",
                  "entity_type": "AzureVM"
                },
                {
                  "entity_id": "18230:601:1832167524",
                  "entity_type": "EC2Instance"
                }
              ],
              "cursor": "MTA=",
              "total_count": 15,
              "start_time": 1509231996,
              "end_time": 1509318396
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/{id}/top-talking-pair": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Application top talking pairs",
        "description": "List Application top talking pairs based on provided criteria",
        "operationId": "getAppTopTalkingPairs",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          },
          {
            "in": "query",
            "name": "sort_criteria",
            "description": "Sorting criteria",
            "required": true,
            "type": "array",
            "items": {
              "$ref": "#/definitions/TopTalkerSortEnum"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationTopTalkingPairData"
            },
            "examples": {
              "results": [
                {
                  "src_entity_id": "18230:1702:123456",
                  "src_entity_type": "AzureVM",
                  "dst_entity_id": "18230:601:1233393386",
                  "dst_entity_type": "EC2Instance"
                },
                {
                  "src_entity_id": "18230:601:1832167524",
                  "src_entity_type": "EC2Instance",
                  "dst_entity_id": "18230:1702:9876543",
                  "dst_entity_type": "AzureVM"
                }
              ],
              "cursor": "MTA=",
              "total_count": 15,
              "start_time": 1509231996,
              "end_time": 1509318396
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/fetch": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get application details in bulk",
        "description": "Get the details of applications in bulk, by providing a list of entity IDs.",
        "operationId": "listApplicationsDetails",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "name": "modifiedAfter",
            "in": "query",
            "required": false,
            "description": "timestamp after which apps has been modified",
            "type": "number"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedApplicationListResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/{id}/tiers": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create tier in application",
        "description": "Create a tier of an application by with specified membership criteria. The membership criteria id defined in terms of\nvirtual machines or IP addresses/subnet. Please refer to API Guide on how to construct membership criteria.",
        "operationId": "addTier",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TierRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Tier"
            },
            "examples": {
              "entity_id": "18230:562:1266458745",
              "name": "tier-1",
              "entity_type": "Tier",
              "group_membership_criteria": [
                {
                  "membership_type": "SearchMembershipCriteria",
                  "search_membership_criteria": {
                    "entity_type": "VirtualMachine",
                    "filter": "security_groups.entity_id = '18230:82:604573173'"
                  }
                }
              ],
              "application": {
                "entity_id": "18230:561:271275765",
                "entity_type": "Application"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List tiers of an application",
        "description": "List tiers of an application",
        "operationId": "listApplicationTiers",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TierListResponse"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:562:1266458745",
                  "name": "tier-1",
                  "entity_type": "Tier",
                  "group_membership_criteria": [
                    {
                      "membership_type": "SearchMembershipCriteria",
                      "search_membership_criteria": {
                        "entity_type": "VirtualMachine",
                        "filter": "security_groups.entity_id = '18230:82:604573173'"
                      }
                    }
                  ],
                  "application": {
                    "entity_id": "18230:561:271275765",
                    "entity_type": "Application"
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/applications/{id}/tiers/{tier-id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Show application tier details",
        "description": "Show application tier details",
        "operationId": "getApplicationTier",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "name": "tier-id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Tier"
            },
            "examples": {
              "entity_id": "18230:562:1266458745",
              "name": "tier-1",
              "entity_type": "Tier",
              "group_membership_criteria": [
                {
                  "membership_type": "SearchMembershipCriteria",
                  "search_membership_criteria": {
                    "entity_type": "VirtualMachine",
                    "filter": "security_groups.entity_id = '18230:82:604573173'"
                  }
                }
              ],
              "application": {
                "entity_id": "18230:561:271275765",
                "entity_type": "Application"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete application tier",
        "description": "Delete application tier of an application",
        "operationId": "deleteTier",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "name": "tier-id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Edit tier in application",
        "description": "Edit a tier of an application with specified membership criteria. The membership criteria id defined in terms of\nvirtual machines or IP addresses/subnet. Please refer to API Guide on how to construct membership criteria.",
        "operationId": "editApplicationTier",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "name": "tier-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TierRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Tier"
            },
            "examples": {
              "entity_id": "18230:562:1266458745",
              "name": "tier-1",
              "entity_type": "Tier",
              "group_membership_criteria": [
                {
                  "membership_type": "SearchMembershipCriteria",
                  "search_membership_criteria": {
                    "entity_type": "VirtualMachine",
                    "filter": "security_groups.entity_id = '18230:82:604573173'"
                  }
                }
              ],
              "application": {
                "entity_id": "18230:561:271275765",
                "entity_type": "Application"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/groups/tiers/{tier-id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Show application tier details",
        "description": "Show application tier details",
        "operationId": "getTier",
        "parameters": [
          {
            "name": "tier-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Header",
            "required": true,
            "type": "string",
            "format": "NetworkInsight <token>"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Tier"
            },
            "examples": {
              "entity_id": "18230:562:1266458745",
              "name": "tier-1",
              "entity_type": "Tier",
              "group_membership_criteria": [
                {
                  "membership_type": "SearchMembershipCriteria",
                  "search_membership_criteria": {
                    "entity_type": "VirtualMachine",
                    "filter": "security_groups.entity_id = '18230:82:604573173'"
                  }
                }
              ],
              "application": {
                "entity_id": "18230:561:271275765",
                "entity_type": "Application"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/kubernetes-services": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "List Kubernetes Services",
        "description": "List Kubernetes services",
        "operationId": "getKubernetesServices",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/StartTime"
          },
          {
            "$ref": "#/parameters/EndTime"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            },
            "examples": {
              "results": [
                {
                  "entity_id": "18230:1504:115896",
                  "entity_type": "KubernetesService",
                  "time": 1509283414
                },
                {
                  "entity_id": "18230:1504:87533",
                  "entity_type": "KubernetesService",
                  "time": 1509283476
                }
              ],
              "cursor": "MTA=",
              "total_count": 39,
              "start_time": 1509335034,
              "end_time": 1509335034
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/kubernetes-services/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Show Kubernetes service details",
        "description": "Show Kubernetes service details",
        "operationId": "getKubernetesServiceById",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "$ref": "#/parameters/Time"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KubernetesService"
            },
            "examples": {
              "entity_id": "1234:1504:13522",
              "vendorId": "9902d9fa-c563-11e8-aa7a-005056869748",
              "name": "carts",
              "entity_type": "KubernetesService",
              "type": "ClusterIP",
              "clusterip": [
                {
                  "ip_address": "10.197.17.74",
                  "netmask": "255.255.255.0",
                  "network_address": "10.197.17.0/24"
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/micro-seg/recommended-rules": {
      "post": {
        "tags": [
          "Microsegmentation"
        ],
        "summary": "Get logical recommended firewall rules",
        "description": "Get recommended firewall rules based on the flow data gathered by vRealize Network Insight.\nThis API provides service to retrieve recommended rules based on flow traffic that is observed between\ntwo groups OR for a single group based on all the inbound and outboud traffic for that group.\nIn case two groups are provided, both the groups should be of same type.\nCurrently supported groups are Application, Tier, NSXSecurityGroup, EC2SecurityGroup.",
        "operationId": "listRecommendedRules",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Recommended Rules Request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RecommendedRulesRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RecommendedRules"
            },
            "examples": {
              "results": [
                {
                  "sources": [
                    {
                      "entity_id": "10000:562:1904698621",
                      "entity_type": "Tier"
                    }
                  ],
                  "destinations": [
                    {
                      "entity_id": "10000:562:1780351215",
                      "entity_type": "Tier"
                    }
                  ],
                  "protocols": [
                    "UDP"
                  ],
                  "port_ranges": [
                    {
                      "start": 53,
                      "end": 53
                    },
                    {
                      "start": 1025,
                      "end": 1025
                    }
                  ],
                  "action": "ALLOW"
                }
              ],
              "time_range": {
                "start_time_epoch": 1508996919391,
                "end_time_epoch": 1509083319391
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/micro-seg/recommended-rules/nsx": {
      "post": {
        "tags": [
          "Microsegmentation"
        ],
        "summary": "Export recommended firewall rules for NSX-v",
        "description": "Export recommended firewall rules based on the flow data gathered by vRealize Network Insight in NSX-V compatible\nformat. The output will be a .zip file download.",
        "operationId": "exportNsxRecommendedRules",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "NSX Recommended Firewall Rules Request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RecommendedRulesRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/search": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Search entities",
        "description": "Using search API you can search vRealize Network Insight entities by specifying entity type and filter expression.\nA filter expression is a predicate expression (similar to SQL where clause) used to define the search criteria.\nPlease refer to API Guide on details of how to construct filter expression. A successful search request will return a\nlist of entity ids that matches the search criteria.",
        "operationId": "searchEntities",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search Request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PagedListResponseWithTime"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/search/aggregation": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Search Aggregation API",
        "description": "Using aggregate API you can aggregate search results for vRealize Network Insight entities by specifying\nentity type, filter expression and aggregate clause. Please refer to API Guide on details of how to construct\nfilter expression and aggregate clause. A successful search request will return a list of aggregations.",
        "operationId": "aggregateSearchResults",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Aggregation Request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AggregationRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AggregationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/search/groupby": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Search Group By API",
        "description": "Using groupby search API you can group search results for vRealize Network Insight entities by specifying\nentity type, filter expression, aggregate clause and groupby clause. Please refer to API Guide on details\nof how to construct filter expression, aggregate clause and groupby clause. A successful search request will\nreturn a list of groups.",
        "operationId": "groupSearchResults",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "GroupBy Request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchGroupByRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchGroupByResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/ip-tags/tag-ids": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Show IP tag IDs",
        "description": "Get all tag IDs e.g. EAST_WEST, INTERNET etc. These are used in the flow tags.",
        "operationId": "getIpTagIds",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpTagIdList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/ip-tags/{tag-id}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Show IP tag details",
        "description": "Show IP tag details with member IP addresses and subnets",
        "operationId": "getIpTag",
        "parameters": [
          {
            "name": "tag-id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IpTag"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/ip-tags/{tag-id}/add": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Tag IP addresses with tag-id",
        "description": "Tag IP addresses with tag-id",
        "operationId": "addIpTag",
        "parameters": [
          {
            "name": "tag-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Ip Tag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IpTag"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/ip-tags/{tag-id}/remove": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Remove tag from IP addresses",
        "description": "Remove tag from IP addresses",
        "operationId": "removeIpTag",
        "parameters": [
          {
            "name": "tag-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Ip Tag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IpTag"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/subnet-mappings": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Create subnet mapping",
        "description": "Create a new subnet mapping (CIDR to VLAN ID). Physical to physical flows (without the switches added as a data source) can be linked to a VLAN ID with to these mappings.",
        "operationId": "createSubnetMapping",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubnetMappingRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SubnetMapping"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get all subnet mappings",
        "description": "Get all subnet mappings (CIDR to VLAN ID).",
        "operationId": "getSubnetMappings",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubnetMappingList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/subnet-mappings/{id}": {
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update subnet mapping",
        "description": "Update an existing subnet mapping (VLAN ID for the given CIDR).",
        "operationId": "updateSubnetMapping",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubnetMappingRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubnetMapping"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete subnet mapping",
        "description": "Delete an existing subnet mapping (CIDR to VLAN ID).",
        "operationId": "deleteSubnetMapping",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/vidm/certificate": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get certificate for given url",
        "description": "Get certificate for given url",
        "operationId": "getCertificate",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Complete URL path to fetch certificate",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VidmCertificate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/vidm": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Configure VMware Identity Manager",
        "description": "vRealize Network Insight supports SSO authentication through VMware Identity Manager.\nTo authenticate against a particular VMware Identity Manager appliance, it must be configured and enabled in vRealize Network Insight. Only admin users can perform this action.",
        "operationId": "saveVidmConfiguration",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "VMware Identity Manager configuration details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VidmConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VidmConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get configuration details of VMware Identity Manager",
        "description": "Retrieve the saved configuration of VMware Identity Manager in Network Insight. Only admin users can retrieve this information.",
        "operationId": "getVidmConfiguration",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VidmConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete VMware Identity Manager configuration",
        "description": "Delete the existing VMware Identity Manager configuration. Only admin users can perform this action.",
        "operationId": "deleteVidmConfiguration",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update VMware Identity Manager configuration",
        "description": "Update the existing VMware Identity Manager configuration. Only admin users can perform this action.",
        "operationId": "updateVidmConfiguration",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "VMware Identity Manager configuration details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VidmConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VidmConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/vidm/enable": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Enable VMware Identity Manager integration",
        "description": "Enable VMware Identity Manager integration. Only admin users can perform this action.",
        "operationId": "enableVidm",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/vidm/disable": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Disable VMware Identity Manager integration",
        "description": "Disable VMware Identity Manager integration, although it will not delete the configuration. Only admin users can perform this action.",
        "operationId": "disableVidm",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/user-groups/vidm": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Add a VMware Identity Manager user-group to vRealize Network Insight",
        "description": "Add a new VMware Identity Manager user-group to vRealize Network Insight. Only admin users can perform this action.\nVMware Identity Manager must be configured prior to this action.",
        "operationId": "addVidmUserGroup",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User-group details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VidmUserGroupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update role for user-group mapped through VMware Identity Manager",
        "description": "Update role for user-group mapped through VMware Identity Manager. Only admin users can perform this action.",
        "operationId": "updateVidmUserGroupRole",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User-group details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VidmUserGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/user-groups": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "List user-groups",
        "description": "Retrieve the list of existing user-groups. Only admin users can retrieve this information.\nThis action is currently restricted to user-groups mapped through VMware Identity Manager.",
        "operationId": "getUserGroups",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/UserGroupType"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PagedUserGroupListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/user-groups/{id}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get details of a user-group",
        "description": "Get details of a user-group. Only admin users can perform this action.\nThis action is currently restricted to user-group mapped through VMware Identity Manager.",
        "operationId": "getUserGroup",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroupResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete an existing user-group",
        "description": "Delete an existing user-group. Only admin users can perform this action.\nThis action is currently restricted to user-group mapped through VMware Identity Manager",
        "operationId": "deleteUserGroup",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/users/vidm": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Add a VMware Identity manager user to vRealize Network Insight",
        "description": "Add a new VMware Identity manager user to vRealize Network Insight. Only admin users can perform this action.\nVMware Identity Manager must be configured prior to this action.",
        "operationId": "addVidmUser",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VidmUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update role for user mapped through VMware Identity Manager",
        "description": "Update role for user mapped through VMware Identity Manager. Only admin users can perform this action.",
        "operationId": "updateVidmUserRole",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VidmUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/users": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "List the users",
        "description": "List the existing users. Only admin users can retrieve this information.\nThis action is currently restricted to users mapped through VMware Identity Manager",
        "operationId": "getUsers",
        "parameters": [
          {
            "$ref": "#/parameters/Size"
          },
          {
            "$ref": "#/parameters/Cursor"
          },
          {
            "$ref": "#/parameters/UserType"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PagedUserListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/users/{id}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get details of a user",
        "description": "Get details of a user. Only admin users can perform this action.\nThis action is currently restricted to user mapped through VMware Identity Manager",
        "operationId": "getUser",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete an existing user.",
        "description": "Delete an existing user. Only admin users can perform this action.\nThis action is currently restricted to user mapped through VMware Identity Manager",
        "operationId": "deleteUser",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/users/password": {
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update user password",
        "description": "Update password of a local user. Any user can change his own password. Admin has permission to change any user\npassword.",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/settings/proxy-servers": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Add new Web Proxy in the system",
        "description": "Add new Web Proxy server. By Default, maximum of 10 web proxy servers can be configured. Only admin users can perform this action.",
        "operationId": "addWebProxy",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Web Proxy Details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebProxyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProxyProfileIdResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "List of configured web proxy servers",
        "description": "List of configured web proxy servers. Only admin and audit users can retrieve this information.",
        "operationId": "getWebProxies",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProxyListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/settings/proxy-servers/{id}": {
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update the existing web proxy server",
        "description": "Update the details of an existing Web Proxy Server. Only admin can perform this action.",
        "operationId": "updateWebProxy",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated Web Proxy Details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebProxyRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get details of an existing Web Proxy Server",
        "description": "Get details of an existing Web Proxy Server. Only admin and audit users can perform this action.",
        "operationId": "getWebProxy",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProxyResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete an existing Web Proxy server",
        "description": "Delete an existing existing Web Proxy Server. Only admin user can perform this action.",
        "operationId": "deleteWebProxy",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "name": "migrationWebProxyId",
            "in": "query",
            "required": false,
            "description": "Identifier of web proxy to which all the existing connections will be migrated to",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/settings/proxy-servers/{id}/validate-entities": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Validate the connections via web proxy",
        "description": "Validate the connections with the updated web proxy settings. Only admin users can perform this action.",
        "operationId": "validateConnectionsViaWebProxy",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Web Proxy Details to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebProxyRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ValidateConnectionViaWebProxyResponseList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/settings/proxy-servers/validate-migration": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Validate the connections when migrating from one web proxy to another",
        "description": "Validate the connections when migrating from one web proxy to another. Only admin users can perform this action.",
        "operationId": "validateWebProxyMigration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Web Proxy Details for migration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebProxyMigrationRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ValidateConnectionViaWebProxyResponseList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/settings/proxy-servers/{id}/connected-clients": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get details of connected clients to Web Proxy Server",
        "description": "Get details of connected clients to Web Proxy Server. Only admin and audit users can perform this action.",
        "operationId": "getConnectedClientsToWebProxy",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityUsingOrBehindWebProxyList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/settings/proxy-servers/infra": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get details of web proxy config associated with infra nodes",
        "description": "Get web proxy for infra nodes. Only admin and audit users can perform this action.",
        "operationId": "getInfraNodesWebProxy",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebProxyConfigListForNodes"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/snmp/profiles": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Add new SNMP Trap destination profile",
        "description": "Add a new SNMP destination profile. By Default, maximum of 4 SNMP Trap profiles can be configured. Only admin users can perform this action.",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SNMP Trap destination profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnmpProfileRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SnmpProfileResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "List the configured SNMP Trap destination profiles",
        "description": "List the configured SNMP Trap destination profiles. Only admin users can retrieve this information.",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SnmpProfileListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/snmp/profiles/send-test-trap": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Send Test trap to SNMP destination profile",
        "description": "Send Test trap to SNMP destination profile. Only admin users can perform this action.",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SNMP destination profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnmpProfileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TestSnmpProfileResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/settings/snmp/profiles/{id}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get details of an existing SNMP destination profile",
        "description": "Get details of an existing SNMP Trap destination profile. Only admin users can perform this action.",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SnmpProfileResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update an existing SNMP destination profile",
        "description": "Update an existing SNMP Trap destination profile. Only admin users can perform this action.",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SNMP destination profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnmpProfileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SnmpProfileResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete an existing SNMP Trap destination profile",
        "description": "Delete an existing SNMP destination profile. Only admin users can perform this action.",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/settings/snmp/profiles/{id}/migrate-events": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Migrate event subscriptions to other SNMP Trap destination profiles",
        "description": "Migrate event subscriptions from given SNMP profile to multiple other SNMP Trap destination profiles.",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SNMP Trap destination profiles list",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnmpProfileIds"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/settings/events/user-defined-events": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Add new User-Defined event",
        "description": "Add new User-Defined event.",
        "operationId": "createUserDefinedEvent",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add new User-Defined events",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "List the created User Defined Event defintions.",
        "description": "List the created User Defined Event defintions.",
        "operationId": "getAllUserDefinedEvents",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/events/user-defined-events/{id}/enable": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Enable an existing User-Defined event",
        "description": "Enable an existing User-Defined event.",
        "operationId": "enableUserDefinedEvent",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/events/user-defined-events/{id}/disable": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Disable an existing User-Defined event",
        "description": "Disable an existing User-Defined event.",
        "operationId": "disableUserDefinedEvent",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/events/user-defined-events/{id}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get details of an existing User-Defined event.",
        "description": "Get details of an existing User-Defined event.",
        "operationId": "getUserDefinedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubscriptionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update an existing User-Defined event.",
        "description": "Update an existing User-Defined event.",
        "operationId": "updateUserDefinedEvent",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update an existing User-Defined event.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete an existing User-Defined event",
        "description": "Delete an existing User-Defined event.",
        "operationId": "deleteUserDefinedEvent",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Identifier"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/backup": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Configure backup of configuration",
        "description": "Configure backup of platform configuration; system settings, data sources, SMTP and\nSNMP settings, and more. This can be sent to a local filesystem, or a remove SSH\nor FTP server.",
        "operationId": "addBackupConfig",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Backup configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackupRestoreRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BackupRestoreRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Backup configuration",
        "description": "Update Backup configuration",
        "operationId": "updateBackupConfig",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated Backup configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackupRestoreRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BackupRestoreRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Backup configuration",
        "description": "Get Backup configuration",
        "operationId": "getBackupConfig",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupRestoreRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete existing Backup configuration",
        "description": "Delete existing Backup configuration.",
        "operationId": "deleteBackupConfig",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/backup/status": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get currently running or last Backup job status",
        "description": "Get currently running or last Backup job status",
        "operationId": "getBackupStatusReport",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupRestoreStatusResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/restore": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Configure restore of configuration and triggers restore operation",
        "description": "Configure restore of platform configuration and triggers restore operation. Must be done on a clean platform deployment.",
        "operationId": "addRestoreConfig",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Restore configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackupRestoreRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BackupRestoreRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Restore configuration",
        "description": "Get Restore configuration",
        "operationId": "getRestoreConfig",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupRestoreRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete existing restore configuration",
        "description": "Delete existing restore configuration.",
        "operationId": "deleteRestoreConfig",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/restore/status": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get currently running or last Restore job status",
        "description": "Get currently running or last Restore job status",
        "operationId": "getRestoreStatusReport",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BackupRestoreStatusResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/licensing/": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get current licensing and license usage information",
        "description": "Get information for current licenses and license usage",
        "operationId": "getLicenses",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicensingResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/licensing/validate": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Validates license key",
        "description": "Validates license key, makes sure it can be applied.",
        "operationId": "validateSerialNumber",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Licensing Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LicensingKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicensingActivate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/licensing/activate": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Activates a valid license key. This API is not applicable for on-boarding.",
        "description": "Activates a valid license key to an existing deployment. For example, adding a SD-WAN license key.",
        "operationId": "activateSerialNumber",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Licensing Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LicensingKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicensingActivate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/settings/licensing/deactivate": {
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Deactivates an existing license key",
        "description": "Deactivates an existing license key",
        "operationId": "deactivateSerialNumber",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Licensing Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LicensingKeyRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/path/firewall-rules": {
      "post": {
        "tags": [
          "Path"
        ],
        "summary": "Get firewall rules for specified client server ips and port/protocol",
        "description": "Get firewall rules applicable in path for a client IP and server IP for specified port/protocol.",
        "operationId": "pathFirewallRules",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "VMware Identity Manager configuration details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PathFirewallRulesRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PathFirewallRules"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/logs/audit": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Get Audit logs",
        "description": "get audit logs based on filters specified in query",
        "operationId": "getAuditLogs",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Query Filters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuditRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuditListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/schema/problems": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Get Event meta Information",
        "description": "Bulk fetch of event meta info. Max batch size is 1000.",
        "operationId": "bulkFetchEventMetaInfo",
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventMetaInfoResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/entities/vendor-infos/fetch": {
      "post": {
        "tags": [
          "Entities"
        ],
        "summary": "Get Vendor Information of entities",
        "description": "Bulk fetch of vendor info. Max batch size is 1000.",
        "operationId": "bulkFetchVendorInfo",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/FetchRequest"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DetailedVendorInfoResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    }
  },
  "definitions": {
    "UserCredential": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "admin@vrni.com"
        },
        "password": {
          "type": "string",
          "example": "password"
        },
        "domain": {
          "$ref": "#/definitions/Domain"
        }
      }
    },
    "Domain": {
      "type": "object",
      "properties": {
        "domain_type": {
          "type": "string",
          "enum": [
            "LDAP",
            "LOCAL"
          ],
          "example": "LDAP"
        },
        "value": {
          "type": "string",
          "description": "domain value, not required for LOCAL domain",
          "example": "example.com"
        }
      }
    },
    "Token": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "example": "Mgs2YX0ZSY+gHW6RYypeeA=="
        },
        "expiry": {
          "description": "expiry epoch time in secs.",
          "type": "integer",
          "format": "int64",
          "example": 1605201960327
        }
      }
    },
    "VidmToken": {
      "type": "object",
      "properties": {
        "vidm_token": {
          "description": "User access token provided by VMware Identity Manager.",
          "type": "string"
        }
      }
    },
    "VidmConfiguration": {
      "type": "object",
      "properties": {
        "vidm_appliance": {
          "type": "string",
          "description": "Provide fully quallified domain name of VMware Identity Manager",
          "example": "identity.domain.com"
        },
        "rootCA_certificate": {
          "type": "string",
          "description": "Provide rootCA certificate to trust. Can be generated using /vidm/licence",
          "example": "-----BEGIN CERTIFICATE----- ..etc.."
        },
        "client_id": {
          "type": "string",
          "example": "vRealize Network Insight Client-ID",
          "description": "Register VMware vRealize Network Insight as an OAuth client to VMware Identity Manager and provide client-id"
        },
        "client_secret": {
          "type": "string",
          "description": "Provide the registered OAuth client secret",
          "example": "T2zRetc2f242KhelfoO6Qzw9"
        },
        "sha_thumbprint": {
          "type": "string",
          "example": "15:37:48:1E:DB:70:65:80:B2:74:E5:78:25:E5:AD:39:14:53:69:19",
          "description": "Optionally, provide SHA thumbprint to validate VMware Identity Manager appliance that is being configured"
        },
        "enable": {
          "type": "boolean",
          "example": true,
          "description": "True, to enable the VMware Identity Manager integration in vRealize Network Insight"
        }
      }
    },
    "VidmCertificate": {
      "type": "object",
      "properties": {
        "vidm_root_certificate": {
          "description": "Root certificate of the VIDM server",
          "type": "string",
          "example": "-----BEGIN CERTIFICATE----- ..etc.."
        }
      }
    },
    "VidmConfigResponse": {
      "type": "object",
      "properties": {
        "vidm_appliance": {
          "type": "string",
          "description": "Fully quallified domain name of VMware Identity Manager",
          "example": "identity.domain.com"
        },
        "client_id": {
          "description": "Client-id of the configured OAuth client",
          "type": "string",
          "example": "vRealize Network Insight Client-ID"
        },
        "enable": {
          "type": "boolean",
          "description": "True, if VMware Identity Manager integration is enabled",
          "example": true
        },
        "certificate_validation_enabled": {
          "type": "boolean",
          "default": false,
          "description": "True, if SSL certificate check is enabled.",
          "example": false
        }
      }
    },
    "VidmOauthClientResponse": {
      "type": "object",
      "properties": {
        "vidm_appliance": {
          "type": "string",
          "description": "Fully quallified domain name of VMware Identity Manager configured in vRealize Network Insight",
          "example": "identity.domain.com"
        },
        "client_id": {
          "type": "string",
          "description": "Client-id of the password grant OAuth client",
          "example": "vRealize Network Insight Client-ID"
        }
      }
    },
    "UserType": {
      "type": "string",
      "description": "The type of user.",
      "enum": [
        "LDAP",
        "LOCAL",
        "VIDM"
      ],
      "example": "VIDM"
    },
    "UserGroupType": {
      "type": "string",
      "description": "The type of user-group.",
      "enum": [
        "LDAP",
        "LOCAL",
        "VIDM"
      ],
      "example": "VIDM"
    },
    "Role": {
      "type": "string",
      "description": "Role assigned the user/group.",
      "enum": [
        "MEMBER",
        "ADMIN",
        "AUDITOR"
      ],
      "example": "ADMIN"
    },
    "VidmUserRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Provide username (domain should not be part of username).",
          "example": "alleyMartin123"
        },
        "domain": {
          "type": "string",
          "description": "Provide domain name to which user belongs to.",
          "example": "vidmlabs.com"
        },
        "display_name": {
          "type": "string",
          "description": "Provide user's display name (could be \"givenName familyName\")",
          "example": "alley martin"
        },
        "role": {
          "$ref": "#/definitions/Role"
        }
      },
      "example": {
        "username": "alleymartin123",
        "domain": "vidmlabs.com",
        "display_name": "alley martin",
        "role": "ADMIN"
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "user_type": {
          "$ref": "#/definitions/UserType"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier assigned to user.",
          "example": "alleymartin123@vidmlabs.com"
        },
        "role": {
          "$ref": "#/definitions/Role"
        },
        "username": {
          "type": "string",
          "description": "Username of the user",
          "example": "alleyMartin123"
        },
        "domain": {
          "type": "string",
          "description": "Domain name to which group belongs to.",
          "example": "vidmlabs.com"
        },
        "display_name": {
          "type": "string",
          "description": "User's display name",
          "example": "alley martin"
        }
      },
      "example": {
        "id": "alleymartin123@vidmlabs.com",
        "user_type": "VIDM",
        "username": "alleymartin123",
        "domain": "vidmlabs.com",
        "display_name": "alley martin",
        "role": "ADMIN"
      }
    },
    "PagedUserListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserResponse"
          }
        },
        "cursor": {
          "type": "string",
          "example": "MTA="
        },
        "total_count": {
          "type": "integer",
          "example": 101
        }
      }
    },
    "VidmUserGroupRequest": {
      "type": "object",
      "properties": {
        "group_name": {
          "type": "string",
          "description": "Specify group name (domain should not be part of group name).",
          "example": "superAdmins"
        },
        "domain": {
          "type": "string",
          "description": "Provide domain name to which user-group belongs to.",
          "example": "vidmlabs.com"
        },
        "role": {
          "$ref": "#/definitions/Role"
        }
      },
      "example": {
        "group_name": "testgroup",
        "domain": "vidmlabs.com",
        "role": "ADMIN"
      }
    },
    "UserGroupResponse": {
      "type": "object",
      "properties": {
        "group_type": {
          "$ref": "#/definitions/UserGroupType"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier assigned to user-group.",
          "example": "testgroup@vidmlabs.com"
        },
        "group_name": {
          "type": "string",
          "description": "Group-name of the user-group.",
          "example": "vrniAdmins"
        },
        "domain": {
          "type": "string",
          "description": "Domain name to which user-group belongs to.",
          "example": "vidmlabs.com"
        },
        "role": {
          "$ref": "#/definitions/Role"
        }
      },
      "example": {
        "id": "testgroup@vidmlabs.com",
        "group_type": "VIDM",
        "group_name": "testgroup",
        "domain": "vidmlabs.com",
        "role": "ADMIN"
      }
    },
    "PagedUserGroupListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupResponse"
          }
        },
        "cursor": {
          "type": "string",
          "example": "MTA="
        },
        "total_count": {
          "type": "integer",
          "example": 1000
        }
      }
    },
    "FileServerType": {
      "type": "string",
      "description": "File Server type.",
      "enum": [
        "LOCAL",
        "SSH",
        "FTP"
      ],
      "example": "SSH"
    },
    "LocalFileServer": {
      "type": "object",
      "properties": {
        "backup_directory": {
          "type": "string",
          "description": "Directory on file server to store/fetch backups",
          "example": "/home/testuser"
        },
        "backup_file_name": {
          "type": "string",
          "description": "filename of the backup to be restored (used during restore only)",
          "example": "vrni-backup-12-4-5.tar"
        }
      }
    },
    "SshFileServer": {
      "type": "object",
      "properties": {
        "server_address": {
          "type": "string",
          "description": "IP address or hostname of destination SSH file server",
          "example": "10.234.12.134"
        },
        "port": {
          "type": "integer",
          "description": "File transfer port",
          "example": 22
        },
        "username": {
          "type": "string",
          "description": "username to login ssh server",
          "example": "testuser"
        },
        "password": {
          "type": "string",
          "description": "password for the user to login ssh server",
          "example": "password"
        },
        "backup_directory": {
          "type": "string",
          "description": "directory on file server to store/fetch backups",
          "example": "/home/testuser"
        },
        "backup_file_name": {
          "type": "string",
          "description": "filename of the backup to be restored (used during restore only)",
          "example": "vrni-backup-12-4-5.tar"
        }
      }
    },
    "FtpFileServer": {
      "type": "object",
      "properties": {
        "server_address": {
          "type": "string",
          "description": "IP address or hostname of destination FTP file server",
          "example": "10.234.12.134"
        },
        "port": {
          "type": "integer",
          "description": "File transfer port",
          "example": 21
        },
        "username": {
          "type": "string",
          "description": "username to login FTP server",
          "example": "testuser"
        },
        "password": {
          "type": "string",
          "description": "password for the user to login FTP server",
          "example": "password"
        },
        "backup_directory": {
          "type": "string",
          "description": "directory on file server to store/fetch backups",
          "example": "/home/testuser"
        },
        "backup_file_name": {
          "type": "string",
          "description": "filename of the backup to be restored (used during restore only)",
          "example": "vrni-backup-12-4-5.tar"
        }
      }
    },
    "BackupSchedulePeriod": {
      "type": "string",
      "description": "Backup Schedule period.",
      "enum": [
        "DAILY",
        "WEEKLY"
      ],
      "example": "DAILY"
    },
    "BackupSchedule": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean",
          "default": true,
          "description": "True, to enable scheduled backup"
        },
        "schedule_period": {
          "$ref": "#/definitions/BackupSchedulePeriod"
        },
        "minute": {
          "type": "integer",
          "description": "The minute at which backup needs to run (permitted values 0 - 59)",
          "example": 30
        },
        "hour": {
          "type": "integer",
          "description": "The hour at which backup needs to run (permitted values 0 - 23)",
          "example": 12
        },
        "day_of_week": {
          "type": "integer",
          "description": "The day of the week when backup to be scheduled (permitted values 1{Sunday} - 7{Saturday})",
          "example": 1
        }
      }
    },
    "ConfigDataFilter": {
      "type": "object",
      "properties": {
        "snmp": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "smtp": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "web_proxy": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "data_sources": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "events": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "syslog": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "ldap": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "vidm": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "user_data": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "physical_subnet_vlan": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "physical_ip_dns_mapping": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "system_configuration": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "east_west_ip": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "north_south_ip": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "data_management": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "online_update_status": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "ceip_status": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "audit_logs_pii_status": {
          "type": "boolean",
          "default": true,
          "example": true
        }
      }
    },
    "CollectorMapping": {
      "type": "object",
      "description": "Mappings for source collector (backup setup) to destination collector (restore setup)",
      "properties": {
        "default_collector": {
          "type": "string",
          "description": "Default collector_VM ip-address for mapping data sources, if no other collector mapping provided explicitly",
          "example": "10.78.89.125"
        },
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectMapping"
          }
        }
      }
    },
    "ObjectMapping": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "description": "Source object value",
          "example": "10.78.89.125"
        },
        "destination": {
          "type": "string",
          "description": "Destination mapped value",
          "example": "10.78.89.126"
        }
      }
    },
    "BackupRestoreRequest": {
      "type": "object",
      "properties": {
        "data_filter": {
          "$ref": "#/definitions/ConfigDataFilter"
        },
        "backup_schedule": {
          "$ref": "#/definitions/BackupSchedule"
        },
        "backup_file_server_type": {
          "$ref": "#/definitions/FileServerType"
        },
        "local_file_server": {
          "$ref": "#/definitions/LocalFileServer"
        },
        "ssh_file_server": {
          "$ref": "#/definitions/SshFileServer"
        },
        "ftp_file_server": {
          "$ref": "#/definitions/FtpFileServer"
        },
        "schedule_now": {
          "type": "boolean",
          "default": false,
          "description": "True, to run backup now (on demand)",
          "example": true
        },
        "collector_mapping": {
          "$ref": "#/definitions/CollectorMapping"
        }
      }
    },
    "BackupRestoreStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of currently executing or last backup-restore job",
          "example": "IN_PROGRESS"
        },
        "backup_file_name": {
          "type": "string",
          "description": "File name of backup tar file",
          "example": "vrni_backup-10000-2020-12-15-13-00-40.tar"
        },
        "status_updated_timestamp": {
          "type": "string",
          "description": "TimeStamp of the last status update",
          "example": "vrni_backup-10000-2020-12-15-13-00-40.tar"
        },
        "failed_components": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of components failed to backup or restore"
        }
      }
    },
    "WebProxyRequest": {
      "type": "object",
      "properties": {
        "nick_name": {
          "type": "string",
          "description": "Descriptor or identifier for particular web proxy. It should be unique",
          "example": "AWS web Proxy"
        },
        "target_ip": {
          "type": "string",
          "description": "IP address of web Proxy server",
          "example": "10.11.11.102"
        },
        "target_port": {
          "type": "integer",
          "description": "Port number of web Proxy server",
          "example": 161
        },
        "proxy_type": {
          "type": "string",
          "description": "Type of web Proxy being configured. [Permitted Values - HTTP/HTTPS]",
          "example": "HTTP"
        },
        "auth_type": {
          "type": "string",
          "description": "Type of authentication. [Permitted Values - Basic/NTLM]",
          "example": "Basic/NTLM"
        },
        "use_credentials": {
          "type": "boolean",
          "description": "Credentials required for this web proxy",
          "example": true
        },
        "user_name": {
          "type": "string",
          "description": "Username for web proxy authentication",
          "example": "admin"
        },
        "password": {
          "type": "string",
          "description": "Password for web proxy authentication",
          "example": "admin"
        }
      }
    },
    "WebProxyMigrationRequest": {
      "type": "object",
      "properties": {
        "source_webproxy_id": {
          "type": "string",
          "description": "Identifier of web proxy which needs migration",
          "example": "web-proxy-er67ght8kn67"
        },
        "target_webproxy_id": {
          "type": "string",
          "description": "Identifier of web proxy to which entities connected to source_webproxy_id will be migrated",
          "example": "web-proxy-er67ght8kn68"
        }
      }
    },
    "ProxyListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProxyResponse"
          }
        }
      }
    },
    "WebProxyConfigListForNodes": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebProxyConfigForNode"
          }
        }
      }
    },
    "ProxyResponse": {
      "type": "object",
      "properties": {
        "proxy_id": {
          "type": "string",
          "description": "Entity Identifier for a web proxy server",
          "example": "web-proxy-er67ght8kn67"
        },
        "nick_name": {
          "type": "string",
          "description": "Descriptor or identifier for particular web proxy.",
          "example": "AWS web Proxy"
        },
        "target_ip": {
          "type": "string",
          "description": "IP address of web Proxy server",
          "example": "10.11.11.102"
        },
        "target_port": {
          "type": "integer",
          "description": "Port number of web Proxy server",
          "example": 161
        },
        "connected_entities": {
          "type": "integer",
          "description": "Number of connected entities to a web proxy",
          "example": 3
        },
        "proxy_type": {
          "type": "string",
          "description": "Type of web proxy",
          "example": "HTTPS/HTTP"
        },
        "auth_type": {
          "type": "string",
          "description": "Type of authentication",
          "example": "Basic/NTLM"
        },
        "use_credentials": {
          "type": "boolean",
          "description": "Whether credentials were used earlier when web proxy was configured",
          "example": "true/false"
        },
        "user_name": {
          "type": "string",
          "description": "Username of the authenticated web proxy",
          "example": "admin"
        },
        "is_modifiable": {
          "type": "boolean",
          "description": "Can the web proxy be edited or deleted from the UI",
          "example": "true/false"
        }
      }
    },
    "EntityUsingOrBehindWebProxyList": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityUsingOrBehindWebProxyResponse"
          }
        }
      }
    },
    "EntityUsingOrBehindWebProxyResponse": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity ID for a connected client",
          "example": "10000:1:15332641552"
        },
        "entity_type": {
          "type": "string",
          "description": "Type of Entity",
          "example": "DataSource"
        },
        "name": {
          "type": "string",
          "description": "Name of connected client",
          "example": "vcenter"
        },
        "identifier": {
          "type": "string",
          "description": "Identifier/AccessKey/IP Adress of connected client",
          "example": "10.98.101.59"
        }
      }
    },
    "ValidateConnectionViaWebProxyResponseList": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidateConnectionViaWebProxyResponse"
          }
        }
      }
    },
    "ValidateConnectionViaWebProxyResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/EntityUsingOrBehindWebProxyResponse"
        },
        {
          "properties": {
            "status": {
              "type": "string",
              "description": "Validation status of a connected entity with the updated web proxy details",
              "example": "PASS"
            },
            "error_code": {
              "type": "integer",
              "description": "Error code in case validation failed",
              "example": -1
            },
            "message": {
              "type": "string",
              "description": "Error message in case validation failed"
            }
          }
        }
      ]
    },
    "ProxyProfileIdResponse": {
      "type": "object",
      "properties": {
        "proxy_id": {
          "type": "string",
          "description": "Entity Identifier created for the newly configured web proxy server",
          "example": "web-proxy-er67ght8kn67"
        }
      }
    },
    "WebProxyConfigForNode": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string",
          "description": "vRNI Node Identifier (Collector or Platform)",
          "example": "IGHYRTROOHNAMA123"
        },
        "web_proxy_id": {
          "type": "string",
          "description": "Entity Identifier for a web proxy server",
          "example": "web-proxy-er67ght8kn67"
        },
        "web_nick_name": {
          "type": "string",
          "description": "Descriptor or identifier for particular web proxy.",
          "example": "AWS web Proxy"
        }
      }
    },
    "SnmpProfileRequest": {
      "type": "object",
      "properties": {
        "nick_name": {
          "type": "string",
          "description": "Descriptor or identifier for particular SNMP profile.",
          "example": "AWS SNMP collector profile"
        },
        "target_ip": {
          "type": "string",
          "description": "IP address of SNMP target destination",
          "example": "10.11.11.102"
        },
        "target_port": {
          "type": "integer",
          "description": "Receiving port number of SNMP target destination",
          "example": 161
        },
        "snmp_version": {
          "type": "string",
          "enum": [
            "v2c",
            "v3"
          ]
        },
        "snmp_v2c": {
          "$ref": "#/definitions/SNMP2cConfig"
        },
        "snmp_v3": {
          "$ref": "#/definitions/SNMP3Config"
        }
      }
    },
    "TestSnmpProfileResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Test trap sent successfully or not",
          "example": true
        },
        "message": {
          "type": "string",
          "description": "Test SNMP trap status message",
          "example": "Failed sending SNMP trap"
        }
      }
    },
    "SnmpProfileResponse": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity Identifier for SNMP profile.",
          "example": "snmp-er67ght8kn67"
        },
        "nick_name": {
          "type": "string",
          "description": "User defined descriptor or identifier for particular SNMP profile.",
          "example": "AWS SNMP collector profile"
        },
        "target_ip": {
          "type": "string",
          "description": "IP address of SNMP target destination",
          "example": "10.11.11.102"
        },
        "target_port": {
          "type": "integer",
          "description": "Receiving port number of SNMP target destination",
          "example": 161
        },
        "snmp_version": {
          "type": "string",
          "enum": [
            "v2c",
            "v3"
          ]
        },
        "snmp_v2c": {
          "$ref": "#/definitions/SNMP2cConfig"
        },
        "snmp_v3": {
          "$ref": "#/definitions/SNMP3Config"
        }
      }
    },
    "SnmpProfileListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SnmpProfileResponse"
          }
        },
        "total_count": {
          "type": "integer",
          "example": 5
        }
      }
    },
    "SnmpProfileIds": {
      "type": "object",
      "properties": {
        "snmp_profiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VCenterDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSource"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            },
            "is_vmc": {
              "type": "boolean",
              "description": "Whether vCenter is a VMware Cloud operated vCenter (true or false).",
              "default": false
            }
          }
        }
      ],
      "example": {
        "entity_type": "VCenterDataSource",
        "entity_id": "1000:902:12890123",
        "ip": "192.168.10.1",
        "fqdn": "go.vc.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "admin@vsphere.local",
          "password": "thePassword"
        },
        "nickname": "vc1",
        "enabled": true,
        "notes": "VC 1",
        "is_vmc": false
      }
    },
    "BaseDataSource": {
      "type": "object",
      "discriminator": "entity_type",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Internal ID of data source, to be used in subsequent API calls"
        },
        "entity_type": {
          "$ref": "#/definitions/DataSourceType"
        },
        "ip": {
          "type": "string",
          "example": "192.168.10.1",
          "description": "IP address of data source (use either IP or FQDN, not both)"
        },
        "fqdn": {
          "type": "string",
          "example": "your.domain.com",
          "description": "Hostname of data source (use either IP or FQDN, not both)"
        },
        "proxy_id": {
          "type": "string",
          "description": "ID of Collector VM which should register this vcenter",
          "example": "1000:104:12313412"
        },
        "nickname": {
          "type": "string",
          "example": "vc1",
          "description": "A friendly nickname for the data source"
        },
        "enabled": {
          "type": "boolean",
          "default": true,
          "description": "Whether or not data collection is enabled"
        },
        "notes": {
          "type": "string",
          "description": "Room for notes or comments about the data source",
          "example": "Located in DC1"
        }
      }
    },
    "ContainerBaseDataSource": {
      "type": "object",
      "discriminator": "entity_type",
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSource"
        },
        {
          "properties": {
            "manager_id": {
              "type": "string",
              "example": "192.168.10.1",
              "description": "Associated NSX-T data source entity ID"
            },
            "credentials": {
              "$ref": "#/definitions/K8SCredentials"
            }
          }
        }
      ]
    },
    "BaseDataSourceRequest": {
      "type": "object",
      "required": [
        "proxy_id",
        "nickname"
      ],
      "properties": {
        "ip": {
          "type": "string",
          "example": "192.168.10.1",
          "description": "IP address of data source (use either IP or FQDN, not both)"
        },
        "fqdn": {
          "type": "string",
          "example": "your.domain.com",
          "description": "Hostname of data source (use either IP or FQDN, not both)"
        },
        "proxy_id": {
          "type": "string",
          "description": "ID of Collector VM which should register this vcenter",
          "example": "1000:104:12313412"
        },
        "nickname": {
          "type": "string",
          "example": "vc1",
          "description": "A friendly nickname for the data source"
        },
        "enabled": {
          "type": "boolean",
          "default": true,
          "description": "Whether or not data collection is enabled"
        },
        "notes": {
          "type": "string",
          "description": "Room for notes or comments about the data source",
          "example": "Located in DC1"
        }
      }
    },
    "PKSSourceRequest": {
      "type": "object",
      "required": [
        "proxy_id",
        "nickname"
      ],
      "properties": {
        "ip": {
          "type": "string",
          "example": "192.168.10.1",
          "description": "IP address of data source (use either IP or FQDN, not both)"
        },
        "fqdn": {
          "type": "string",
          "example": "your.domain.com",
          "description": "Hostname of data source (use either IP or FQDN, not both)"
        },
        "proxy_id": {
          "type": "string",
          "description": "ID of Collector VM which should register this vcenter",
          "example": "1000:104:12313412"
        },
        "nickname": {
          "type": "string",
          "example": "TKGI-1",
          "description": "A friendly nickname for the data source"
        },
        "enabled": {
          "type": "boolean",
          "default": true,
          "description": "Whether or not data collection is enabled"
        },
        "notes": {
          "type": "string",
          "description": "Room for notes or comments about the data source",
          "example": "Located in DC1"
        },
        "manager_id": {
          "type": "string"
        }
      }
    },
    "KubernetesSourceRequest": {
      "type": "object",
      "required": [
        "proxy_id",
        "nickname"
      ],
      "properties": {
        "proxy_id": {
          "type": "string",
          "description": "ID of Collector VM which should register this vcenter",
          "example": "1000:104:12313412"
        },
        "nickname": {
          "type": "string",
          "example": "vc1",
          "description": "A friendly nickname for the data source"
        },
        "enabled": {
          "type": "boolean",
          "default": true,
          "description": "Whether or not data collection is enabled"
        },
        "notes": {
          "type": "string",
          "description": "Room for notes or comments about the data source",
          "example": "Located in DC1"
        }
      }
    },
    "ServiceNowSourceRequest": {
      "type": "object",
      "required": [
        "proxy_id",
        "nickname"
      ],
      "properties": {
        "proxy_id": {
          "type": "string",
          "description": "ID of Collector VM which should register this vcenter",
          "example": "1000:104:12313412"
        },
        "nickname": {
          "type": "string",
          "example": "snow1",
          "description": "A friendly nickname for the data source"
        },
        "enabled": {
          "type": "boolean",
          "default": true,
          "description": "Whether or not data collection is enabled"
        },
        "notes": {
          "type": "string",
          "description": "Room for notes or comments about the data source",
          "example": "Located in DC1"
        }
      }
    },
    "VCenterDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSourceRequest"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            },
            "is_vmc": {
              "type": "boolean",
              "default": false,
              "description": "Whether vCenter is a VMware Cloud operated vCenter (true or false)."
            }
          }
        }
      ]
    },
    "PasswordCredentials": {
      "type": "object",
      "required": [
        "username"
      ],
      "properties": {
        "username": {
          "type": "string",
          "description": "Username to authenticate with",
          "example": "readonly"
        },
        "password": {
          "type": "string",
          "description": "Password to authenticate with",
          "example": "VMware1!"
        }
      }
    },
    "AzureCredentials": {
      "type": "object",
      "required": [
        "azure_client",
        "azure_tenant",
        "azure_subscription"
      ],
      "properties": {
        "azure_client": {
          "type": "string",
          "description": "Azure Application Client ID to authenticate with",
          "example": "53ba6f2b-6d52-4f5c-8ae0-7adc20808854"
        },
        "azure_key": {
          "type": "string",
          "description": "Azure Application Secret Key to authenticate with",
          "example": "NMubGVcDqkwwGnCs6fa01tqlkTisfUd4pBBYgcxxx="
        },
        "azure_tenant": {
          "type": "string",
          "description": "Azure Application Tenant ID to authenticate against",
          "example": "b98531cb-75cc-4b4a-1ba6-fe87q98662f0"
        },
        "azure_subscription": {
          "type": "string",
          "description": "Azure Application Subscription ID to authenticate against",
          "example": "b98531cb-75cc-4b4a-1ba6-fe87q98662f0"
        }
      }
    },
    "AWSCredentials": {
      "type": "object",
      "required": [
        "access_key"
      ],
      "properties": {
        "access_key": {
          "type": "string",
          "description": "AWS Access Key to authenticate with",
          "example": "AKIAIOSFODNN7EXAMPLE"
        },
        "secret_key": {
          "type": "string",
          "description": "AWS Secret Key to authenticate with",
          "example": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
        }
      }
    },
    "K8SCredentials": {
      "type": "object",
      "required": [
        "kubeconfig"
      ],
      "properties": {
        "kubeconfig": {
          "type": "string",
          "description": "Configuration used to connect to Kubernetes. Can be found in ~/.kube/config",
          "example": {
            "apiVersion": "v1",
            "clusters": {
              "cluster": {
                "api-version": "v1",
                "server": "http://cow.org:8080",
                "name": "cow-cluster"
              }
            }
          }
        }
      }
    },
    "AristaSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "AristaSwitchDataSource",
        "entity_id": "1000:906:12890123",
        "ip": "192.168.10.1",
        "fqdn": "sw1.arista.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "JuniperSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "JuniperSwitchDataSource",
        "entity_id": "1000:909:12890123",
        "ip": "192.168.10.1",
        "fqdn": "sw1.juniper.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "GDDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "GDDataSource",
        "entity_id": "1000:XXX:12890124",
        "ip": "192.168.10.1",
        "fqdn": "example.fqdn.com",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "F5BIGIPDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSource"
        }
      ],
      "example": {
        "entity_type": "F5BIGIPDataSource",
        "entity_id": "10000:952:12890124",
        "ip": "192.168.10.1",
        "fqdn": "f5.fqdn.com",
        "proxy_id": "10000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "NSXALBDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSource"
        }
      ],
      "example": {
        "entity_type": "NSXALBDataSource",
        "entity_id": "10000:955:12890124",
        "ip": "192.168.10.1",
        "fqdn": "nsxlb.fqdn.com",
        "proxy_id": "10000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "HuaweiSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSource"
        }
      ],
      "example": {
        "entity_type": "HuaweiSwitchDataSource",
        "entity_id": "10000:960:12890124",
        "ip": "192.168.10.1",
        "fqdn": "huawei.fqdn.com",
        "proxy_id": "10000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "HPESwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSource"
        }
      ],
      "example": {
        "entity_type": "HPESwitchDataSource",
        "entity_id": "10000:1960:12890124",
        "ip": "192.168.10.1",
        "fqdn": "hpe.fqdn.com",
        "proxy_id": "10000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "MellanoxSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSource"
        }
      ],
      "example": {
        "entity_type": "MellanoxSwitchDataSource",
        "entity_id": "10000:985:12890124",
        "ip": "192.168.10.1",
        "fqdn": "mellanox.fqdn.com",
        "proxy_id": "10000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "CiscoASRXRSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSource"
        }
      ],
      "example": {
        "entity_type": "CiscoASRXRSwitchDataSource",
        "entity_id": "10000:985:12890124",
        "ip": "192.168.10.1",
        "fqdn": "ciscoasrxr.fqdn.com",
        "proxy_id": "10000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "GenericSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSource"
        }
      ],
      "example": {
        "entity_type": "GenericSwitchDataSource",
        "entity_id": "10000:963:12890124",
        "ip": "192.168.10.1",
        "fqdn": "example.fqdn.com",
        "proxy_id": "10000:104:12313412",
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "CiscoSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        },
        {
          "properties": {
            "switch_type": {
              "$ref": "#/definitions/CiscoSwitchType"
            }
          }
        }
      ],
      "example": {
        "entity_type": "CiscoSwitchDataSource",
        "entity_id": "1000:905:12890123",
        "ip": "192.168.10.1",
        "fqdn": "sw1.cisco.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes",
        "switch_type": "NEXUS_5K"
      }
    },
    "DellSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        },
        {
          "properties": {
            "switch_type": {
              "$ref": "#/definitions/DellSwitchType"
            }
          }
        }
      ],
      "example": {
        "entity_type": "DellSwitchDataSource",
        "entity_id": "1000:907:12890123",
        "ip": "192.168.10.1",
        "fqdn": "sw1.dell.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes",
        "switch_type": "S6000"
      }
    },
    "BrocadeSwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "BrocadeSwitchDataSource",
        "entity_id": "1000:908:12890123",
        "ip": "192.168.10.1",
        "fqdn": "sw1.brocade.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "UCSManagerDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ]
    },
    "CiscoACIDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ]
    },
    "HPVCManagerDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ]
    },
    "HPOneViewManagerDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ]
    },
    "UCSManagerDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "UCSManagerDataSource",
        "entity_id": "1000:912:12890123",
        "ip": "192.168.10.1",
        "fqdn": "ucs1.cisco.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "CiscoACIDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "CiscoACIDataSource",
        "entity_id": "1000:912:12890123",
        "ip": "192.168.10.1",
        "fqdn": "apic.cisco.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "HPVCManagerDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "HPVCManagerDataSource",
        "entity_id": "1000:914:12890123",
        "ip": "192.168.10.1",
        "fqdn": "hpvc.hpe.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "HPOneViewManagerDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "HPOneViewManagerDataSource",
        "entity_id": "1000:915:12890123",
        "ip": "192.168.10.1",
        "fqdn": "hponeview1.hpe.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "SwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSourceRequest"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            }
          }
        }
      ]
    },
    "SwitchDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSource"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            }
          }
        }
      ]
    },
    "CiscoSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        },
        {
          "properties": {
            "switch_type": {
              "$ref": "#/definitions/CiscoSwitchType"
            }
          }
        }
      ]
    },
    "JuniperSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        }
      ]
    },
    "GDDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        }
      ]
    },
    "F5BIGIPDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSourceRequest"
        }
      ]
    },
    "NSXALBDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSourceRequest"
        }
      ]
    },
    "HuaweiSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSourceRequest"
        }
      ]
    },
    "HPESwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSourceRequest"
        }
      ]
    },
    "MellanoxSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSourceRequest"
        }
      ]
    },
    "CiscoASRXRSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/GDDataSourceRequest"
        }
      ]
    },
    "GenericSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSourceRequest"
        }
      ]
    },
    "AristaSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        }
      ]
    },
    "BrocadeSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        }
      ]
    },
    "DellSwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        },
        {
          "properties": {
            "switch_type": {
              "$ref": "#/definitions/DellSwitchType"
            }
          }
        }
      ]
    },
    "DellOs10SwitchDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        }
      ]
    },
    "CiscoSwitchType": {
      "type": "string",
      "description": "The Cisco switch model type",
      "example": "NEXUS_6K",
      "enum": [
        "CATALYST_3000",
        "CATALYST_4500",
        "CATALYST_6500",
        "NEXUS_5K",
        "NEXUS_6K",
        "NEXUS_7K",
        "NEXUS_9K",
        "CISCOASRISR"
      ]
    },
    "DellSwitchType": {
      "type": "string",
      "description": "The Dell switch model type",
      "example": "S4048",
      "enum": [
        "FORCE_10_MXL_10",
        "POWERCONNECT_8024",
        "S4048",
        "Z9100",
        "S6000"
      ]
    },
    "CheckpointFirewallDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "CheckpointFirewallDataSource",
        "entity_id": "1000:910:12890123",
        "ip": "192.168.10.1",
        "fqdn": "go.vc.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "PanFirewallDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "PanFirewallDataSource",
        "entity_id": "1000:911:12890123",
        "ip": "192.168.10.1",
        "fqdn": "go.vc.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "CheckpointFirewallDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        }
      ]
    },
    "PanFirewallDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        }
      ]
    },
    "NSXVManagerDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSource"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            },
            "vcenter_id": {
              "type": "string",
              "description": "Associated vCenter data source entity ID"
            },
            "ipfix_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX-v to send IPFIX to vRNI"
            },
            "central_cli_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not collection via the Central CLI for ESG data is enabled"
            },
            "latency_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX-v to send virtual infrastructure latency metrics to vRNI"
            }
          }
        }
      ],
      "example": {
        "entity_type": "NSXVManagerDataSource",
        "entity_id": "1000:903:12890123",
        "ip": "192.168.10.1",
        "fqdn": "go.vc.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "admin@vsphere.local",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes",
        "vcenter_id": "1000:902:738163608",
        "ipfix_enabled": false,
        "central_cli_enabled": true,
        "latency_enabled": true
      }
    },
    "FortinetFirewallDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "FortinetFirewallDataSource",
        "entity_id": "1000:744:12890123",
        "ip": "192.168.10.1",
        "fqdn": "go.vc.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "readonly",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "FortinetFirewallDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSourceRequest"
        }
      ]
    },
    "NSXTManagerDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        },
        {
          "properties": {
            "ipfix_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX-T to send IPFIX to vRNI"
            },
            "latency_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX-T to send virtual infrastructure latency metrics to vRNI"
            },
            "nsxi_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX Intelligence to send additional traffic information to vRNI"
            }
          }
        }
      ],
      "example": {
        "entity_type": "NSXTManagerDataSource",
        "entity_id": "1000:904:12890123",
        "ip": "192.168.10.1",
        "fqdn": "go.nsxt.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "admin@vsphere.local",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes",
        "ipfix_enabled": false,
        "latency_enabled": false,
        "nsxi_enabled": false
      }
    },
    "PKSDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSource"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            },
            "manager_id": {
              "type": "string",
              "description": "Associated NSX-T Manager entity ID"
            }
          }
        }
      ],
      "example": {
        "entity_type": "PKSDataSource",
        "entity_id": "1000:904:12890123",
        "ip": "192.168.10.1",
        "fqdn": "go.pks.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "admin@vsphere.local",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "KubernetesDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ContainerBaseDataSource"
        }
      ],
      "example": {
        "entity_type": "KubernetesDataSource",
        "entity_id": "1000:904:12890123",
        "manager_id": "192.168.10.1",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "admin@vsphere.local",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "AzureDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSource"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/AzureCredentials"
            },
            "flows_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to collect flow data from the VNET Flow Logs"
            },
            "web_proxy_id": {
              "type": "string",
              "description": "Identifier of web proxy to be used for connection. If not given or empty, will clear any web proxy used earlier"
            }
          }
        }
      ],
      "example": {
        "entity_type": "AzureDataSource",
        "entity_id": "1000:966:12890123",
        "proxy_id": "1000:104:12313412",
        "web_proxy_id": "web-proxy-0rgmciw5c9",
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes",
        "flows_enabled": false
      }
    },
    "ServiceNowDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        },
        {
          "properties": {
            "instance_id": {
              "type": "string",
              "description": "Associated nsxt data source entity Id"
            },
            "graph_configuration": {
              "type": "string",
              "description": "CMDB configuration for CIs, relationships and graph traversal rules"
            },
            "is_graph_config_customized": {
              "type": "boolean",
              "description": "Has graph configuration been modified from the default configuration"
            },
            "web_proxy_id": {
              "type": "string",
              "description": "Identifier of web proxy to be used for connection"
            }
          }
        }
      ],
      "example": {
        "entity_type": "ServiceNowDataSource",
        "entity_id": "1000:863:12890123",
        "instance_id": "dev1337.service-now.com",
        "proxy_id": "1000:104:12313412",
        "web_proxy_id": "web-proxy-0rgmciw5c9",
        "credentials": {
          "username": "admin",
          "password": "my password"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes",
        "example": "{\n  \"fetchOnlyApprovedApplications\": false,\n  \"nameBasedSearchForVm\": true,\n  \"ignoreWorkloadCheck\": true,\n  \"ciGroup\": [\n    {\n      ..etc..\n    }\n  ]\n}"
      }
    },
    "InfobloxManagerDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/SwitchDataSource"
        }
      ],
      "example": {
        "entity_type": "InfobloxManagerDataSource",
        "entity_id": "1000:905:12890123",
        "web_proxy_id": "web-proxy-0rgmciw5c9",
        "ip": "192.168.10.1",
        "fqdn": "go.nsxt.org",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "admin@vsphere.local",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "PolicyManagerDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSource"
        },
        {
          "properties": {
            "csp_refresh_token": {
              "type": "string",
              "description": "Cloud Services Portal API Refresh Token. You can generate this via the CSP UI under My Account and API Tokens."
            },
            "vcenter_id": {
              "type": "string",
              "description": "Associated vcenter data source entity ID"
            },
            "ipfix_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX-T to send IPFIX to vRNI"
            },
            "web_proxy_id": {
              "type": "string",
              "description": "Identifier of web proxy to be used for connection"
            }
          }
        }
      ],
      "example": {
        "entity_type": "PolicyManagerDataSource",
        "entity_id": "1000:928:12890123",
        "ip": "192.168.10.1",
        "fqdn": "go.nsxt.org",
        "proxy_id": "1000:104:12313412",
        "web_proxy_id": "web-proxy-0rgmciw5c9",
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes",
        "vcenter_id": "1000:902:738163608",
        "csp_refresh_token": "e9fb6352-03cb-4d98-8f03-b82226c17507",
        "ipfix_enabled": false
      }
    },
    "VeloCloudDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSource"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            },
            "web_proxy_id": {
              "type": "string",
              "description": "Identifier of web proxy to be used for connection"
            }
          }
        }
      ],
      "example": {
        "entity_type": "VeloCloudDataSource",
        "entity_id": "1000:962:12890123",
        "ip": "192.168.10.1",
        "fqdn": "vco.velocloud.net",
        "proxy_id": "1000:5200:12313412",
        "web_proxy_id": "web-proxy-0rgmciw5c9",
        "credentials": {
          "username": "admin@velocloud",
          "password": "thePassword"
        },
        "nickname": "my nickname",
        "enabled": true,
        "notes": "my notes"
      }
    },
    "AWSDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSource"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/AWSCredentials"
            },
            "flows_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to collect flows from the VPC Flow Logs"
            },
            "add_linked_accounts": {
              "type": "boolean",
              "default": false,
              "description": "Automatically add linked accounts"
            },
            "role_arn_suffix": {
              "type": "string"
            },
            "linked_role_arn": {
              "type": "string",
              "description": "Should not be populated. Will be ignored if populated."
            },
            "data_source_hierarchy": {
              "type": "string",
              "description": "Should not be populated. Will be ignored if populated."
            },
            "enable_aws_geo_restrictions": {
              "type": "boolean",
              "default": false,
              "description": "Limit collection to only regions specified in selected_regions"
            },
            "selected_regions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "child_datasource_count": {
              "type": "integer",
              "description": "Should not be populated. Will be ignored if populated."
            },
            "child_datasources": {
              "type": "array",
              "description": "Should not be populated. Will be ignored if populated.",
              "items": {
                "$ref": "#/definitions/DataSourceEntityId"
              }
            },
            "web_proxy_id": {
              "type": "string",
              "description": "Identifier of web proxy to be used for connection. If not given or empty, any web proxy used earlier will be cleared"
            }
          }
        }
      ],
      "example": {
        "entity_type": "AWSDataSource",
        "entity_id": "10000:916:993642895",
        "proxy_id": "1000:104:12313412",
        "web_proxy_id": "web-proxy-0rgmciw5c9",
        "credentials": {
          "access_key": "accessKeyId",
          "secret_key": "secretAccessKey"
        },
        "nickname": "my aws datasource",
        "enabled": true,
        "notes": "my notes",
        "flows_enabled": true,
        "add_linked_accounts": true,
        "role_arn_suffix": "Auditor",
        "enable_aws_geo_restrictions": true,
        "selected_regions": "Asia Pacific (Mumbai)",
        "child_datasource_count": 1
      }
    },
    "NSXControllerDataCollection": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether or not to collect data from the NSX-v Controller Cluster"
        },
        "controller_password": {
          "type": "string",
          "description": "Controller Password"
        }
      }
    },
    "NSXVManagerDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSourceRequest"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            },
            "vcenter_id": {
              "type": "string",
              "description": "Associated vcenter data source entity ID",
              "example": "18230:3:187309184"
            },
            "ipfix_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX-v to send IPFIX to vRNI",
              "example": true
            },
            "central_cli_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not collection via the Central CLI for ESG data is enabled",
              "example": true
            },
            "latency_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX-v to send virtual infrastructure latency metrics to vRNI",
              "example": true
            }
          },
          "required": [
            "vcenter_id",
            "credentials"
          ]
        }
      ]
    },
    "PKSDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSourceRequest"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            },
            "manager_id": {
              "type": "string",
              "description": "Associated NSX-T Manager data source entity ID",
              "example": "18230:3:187309184"
            }
          },
          "required": [
            "credentials",
            "manager_id"
          ]
        }
      ]
    },
    "NSXTManagerDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSourceRequest"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            },
            "ipfix_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX-T to send IPFIX to vRNI",
              "example": true
            },
            "latency_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX-T to send virtual infrastructure latency metrics to vRNI",
              "example": true
            },
            "nsxi_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX Intelligence to send additional traffic information to vRNI",
              "example": true
            }
          },
          "required": [
            "credentials"
          ]
        }
      ]
    },
    "KubernetesDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesSourceRequest"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/K8SCredentials"
            },
            "manager_id": {
              "type": "string",
              "description": "Associated NSX-T data source entity Id",
              "example": "18230:3:187309184"
            }
          },
          "required": [
            "credentials",
            "manager_id"
          ]
        }
      ]
    },
    "AzureDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSourceRequest"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/AzureCredentials"
            },
            "flows_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to collect flow data from the VNET Flow Logs"
            },
            "web_proxy_id": {
              "type": "string",
              "description": "Identifier of web proxy to be used for connection. If not given or empty, any web proxy used earlier will be cleared"
            }
          },
          "required": [
            "credentials"
          ]
        }
      ]
    },
    "VeloCloudDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSourceRequest"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            },
            "web_proxy_id": {
              "type": "string",
              "description": "Identifier of web proxy to be used for connection. If not given or empty, any web proxy used earlier will be cleared"
            }
          },
          "required": [
            "credentials"
          ]
        }
      ]
    },
    "ServiceNowDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceNowSourceRequest"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            },
            "instance_id": {
              "type": "string",
              "example": "dev36113.service-now.com",
              "description": "Associated ServiceNow instance"
            },
            "graph_configuration": {
              "type": "string",
              "description": "CMDB configuration for CIs, relationships and graph traversal rules"
            },
            "is_graph_config_customized": {
              "type": "boolean",
              "description": "Has graph configuration been modified from the default configuration"
            },
            "web_proxy_id": {
              "type": "string",
              "description": "Identifier of web proxy to be used for connection. If not given or empty, any web proxy used earlier will be cleared"
            }
          },
          "required": [
            "credentials",
            "instance_id",
            "is_graph_config_customized"
          ]
        }
      ]
    },
    "InfobloxManagerDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSourceRequest"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            }
          },
          "required": [
            "credentials"
          ]
        }
      ]
    },
    "PolicyManagerDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSourceRequest"
        },
        {
          "properties": {
            "csp_refresh_token": {
              "type": "string",
              "description": "Cloud Services Portal API Refresh Token. You can generate this via the CSP UI under My Account and API Tokens.",
              "example": "e9fb6352-03cb-4d98-8f03-b82226c17507"
            },
            "vcenter_id": {
              "type": "string",
              "description": "Associated vcenter data source entity ID",
              "example": "18230:3:187309184"
            },
            "ipfix_enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not to configure NSX-T to send IPFIX to vRNI"
            },
            "web_proxy_id": {
              "type": "string",
              "description": "Identifier of web proxy to be used for connection. If not given or empty, any web proxy used earlier will be cleared"
            }
          },
          "required": [
            "vcenter_id",
            "csp_refresh_oken"
          ]
        }
      ]
    },
    "DatasourceHealth": {
      "type": "object",
      "description": "Datasource Health state",
      "properties": {
        "health_status": {
          "type": "string",
          "description": "Is the data source healthy and data is being collected?",
          "example": "HEALTH",
          "enum": [
            "HEALTHY",
            "HEALTHY_WITH_WARNINGS",
            "UNHEALTHY"
          ]
        },
        "health_message": {
          "type": "string",
          "description": "Message for when the data source is not healthy",
          "example": "Invalid credentials"
        },
        "health_error_code": {
          "type": "string"
        }
      }
    },
    "SNMPConfig": {
      "type": "object",
      "properties": {
        "snmp_enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable SNMP stats collection?",
          "example": true
        },
        "snmp_version": {
          "description": "SNMP version to use",
          "example": "v2c",
          "type": "string",
          "enum": [
            "v2c",
            "v3"
          ]
        },
        "config_snmp_2c": {
          "$ref": "#/definitions/SNMP2cConfig"
        },
        "config_snmp_3": {
          "$ref": "#/definitions/SNMP3Config"
        }
      }
    },
    "SNMP3Config": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "SNMPv3 Username",
          "example": "readonly"
        },
        "context_name": {
          "type": "string",
          "description": "SNMPv3 Context name",
          "example": "default"
        },
        "authentication_type": {
          "description": "SNMPv3 Authentication type",
          "example": "MD5",
          "type": "string",
          "enum": [
            "NO_AUTH",
            "MD5",
            "SHA"
          ]
        },
        "authentication_password": {
          "type": "string",
          "description": "SNMPv3 Authentication password",
          "example": "VMware1!"
        },
        "privacy_type": {
          "description": "SNMPv3 Privacy password type",
          "example": "AES256",
          "type": "string",
          "enum": [
            "AES",
            "DES",
            "AES128",
            "AES192",
            "AES256",
            "3DES",
            "NO_PRIV"
          ]
        },
        "privacy_password": {
          "type": "string",
          "description": "SNMPv3 Pricacy password",
          "example": "VMware1!"
        }
      }
    },
    "SNMP2cConfig": {
      "type": "object",
      "properties": {
        "community_string": {
          "type": "string",
          "description": "SNMPv2 Community string",
          "example": "public"
        }
      }
    },
    "EntityId": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity Identifier",
          "example": "1000:104:12213212"
        },
        "entity_type": {
          "$ref": "#/definitions/EntityType",
          "description": "The entity type of an object. This is how vRNI identifies different objects like VMs, Hosts, Switches, etc."
        }
      }
    },
    "EntityPair": {
      "type": "object",
      "properties": {
        "src_entity_id": {
          "type": "string",
          "description": "Source Entity Identifier",
          "example": "1000:104:12213212"
        },
        "src_entity_type": {
          "$ref": "#/definitions/EntityType"
        },
        "dst_entity_id": {
          "type": "string",
          "description": "Destination Entity Identifier",
          "example": "1000:104:56789"
        },
        "dst_entity_type": {
          "$ref": "#/definitions/EntityType"
        }
      }
    },
    "DataSourceEntityId": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity Identifier",
          "example": "1000:104:12213212"
        },
        "entity_type": {
          "$ref": "#/definitions/DataSourceType"
        }
      }
    },
    "FetchRequest": {
      "type": "object",
      "properties": {
        "entity_ids": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "entity_id": {
                "type": "string",
                "description": "Entity Identifier"
              },
              "entity_type": {
                "$ref": "#/definitions/EntityType"
              },
              "time": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      }
    },
    "EntityIdWithTime": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity Identifier"
        },
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        },
        "time": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EC2Instance": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseVirtualMachine"
        },
        {
          "properties": {
            "vpc": {
              "$ref": "#/definitions/Reference"
            },
            "region": {
              "type": "string"
            },
            "account": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "AzureVM": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseVirtualMachine"
        },
        {
          "properties": {
            "vnet": {
              "$ref": "#/definitions/Reference"
            },
            "region": {
              "type": "string",
              "description": "The Azure region this VM is hosted",
              "example": "westus-1"
            },
            "subscription": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "VirtualMachine": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseVirtualMachine"
        },
        {
          "properties": {
            "cluster": {
              "$ref": "#/definitions/Reference"
            },
            "resource_pool": {
              "$ref": "#/definitions/Reference"
            },
            "security_tags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "layer2_networks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "host": {
              "$ref": "#/definitions/Reference"
            },
            "vlans": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Vlan"
              }
            },
            "vendor_id": {
              "type": "string"
            },
            "vcenter_manager": {
              "$ref": "#/definitions/Reference"
            },
            "folders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "datastores": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "datacenter": {
              "$ref": "#/definitions/Reference"
            },
            "nsx_manager": {
              "$ref": "#/definitions/Reference"
            },
            "source_inversion_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "destination_inversion_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "cpu_count": {
              "type": "integer",
              "format": "int32",
              "description": "Number of vCPUs this VM has",
              "example": 4
            },
            "memory": {
              "type": "integer",
              "format": "int32",
              "description": "Amount of memory this VM has",
              "example": 1024
            }
          }
        }
      ]
    },
    "BaseVirtualMachine": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "ip_addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpV4Address"
              }
            },
            "default_gateway": {
              "type": "string",
              "description": "Default gateway IP of the VM"
            },
            "vnics": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "security_groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "source_firewall_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "destination_firewall_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "ip_sets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "Cluster": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "total_cpus": {
              "type": "integer",
              "format": "int32",
              "description": "Total CPUs inside the cluster",
              "example": 32
            },
            "total_memory": {
              "type": "integer",
              "format": "int64",
              "description": "Total memory inside the cluster",
              "example": 102400
            },
            "num_cpu_cores": {
              "type": "integer",
              "format": "int32",
              "description": "Total CPU Cores inside the cluster",
              "example": 320
            },
            "vendor_id": {
              "type": "string",
              "description": "Internal vCenter ID of the cluster",
              "example": "c-13"
            },
            "num_hosts": {
              "type": "integer",
              "format": "int32",
              "description": "Number of ESXi hosts in the cluster",
              "example": 4
            },
            "num_datastores": {
              "type": "integer",
              "format": "int32",
              "description": "Number of datastores in the cluster",
              "example": 4
            },
            "nsx_manager": {
              "$ref": "#/definitions/Reference"
            },
            "vcenter_manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "SecurityTag": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "description": {
              "type": "string"
            },
            "direct_security_groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "security_groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "vendor_id": {
              "type": "string"
            },
            "nsx_manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "ResourcePool": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vcenter_manager": {
              "$ref": "#/definitions/Reference"
            },
            "vendor_id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Host": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vmknics": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "cluster": {
              "$ref": "#/definitions/Reference"
            },
            "vcenter_manager": {
              "$ref": "#/definitions/Reference"
            },
            "vm_count": {
              "type": "integer",
              "format": "int32",
              "description": "Number of VMs running on the host",
              "example": 100
            },
            "datastores": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "service_tag": {
              "type": "string",
              "description": "Hardware service tag of the host",
              "example": "CT1342"
            },
            "vendor_id": {
              "type": "string",
              "description": "Internal vCenter ID of the host",
              "example": "host-12"
            },
            "nsx_manager": {
              "$ref": "#/definitions/Reference"
            },
            "maintenance_mode": {
              "type": "string",
              "description": "Is the host in maintenance mode?",
              "example": "false"
            },
            "connection_state": {
              "type": "string",
              "description": "Connection state of the host",
              "example": "DISCONNECTED"
            }
          }
        }
      ]
    },
    "DistributedVirtualPortgroup": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "vcenter_manager": {
              "$ref": "#/definitions/Reference"
            },
            "distributed_virtual_switch": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "DistributedVirtualSwitch": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "vcenter_manager": {
              "$ref": "#/definitions/Reference"
            },
            "hosts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "VCDatacenter": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "vcenter_manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Datastore": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "vcenter_manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "KubernetesService": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "kubernetes_cluster": {
              "$ref": "#/definitions/Reference"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            },
            "annotations": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "labels": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "creation_timestamp": {
              "type": "string"
            },
            "namespace": {
              "$ref": "#/definitions/Reference"
            },
            "cluster_ip": {
              "$ref": "#/definitions/IpV4Address"
            },
            "loadbalancer_ip": {
              "$ref": "#/definitions/IpV4Address"
            },
            "type": {
              "type": "string"
            },
            "external_ips": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpV4Address"
              }
            },
            "selectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Folder": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "vcenter_manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Reference": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        }
      }
    },
    "IpV4Address": {
      "type": "object",
      "properties": {
        "ip_address": {
          "type": "string"
        },
        "netmask": {
          "type": "string"
        },
        "network_address": {
          "type": "string"
        }
      }
    },
    "Vmknic": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "ip_addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpV4Address"
              }
            },
            "vlan": {
              "$ref": "#/definitions/Vlan"
            },
            "host": {
              "$ref": "#/definitions/Reference"
            },
            "layer2_network": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "EC2NetworkInterface": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseVnic"
        }
      ]
    },
    "Vnic": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseVnic"
        }
      ]
    },
    "BaseVnic": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "ip_addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpV4Address"
              }
            },
            "layer2_network": {
              "$ref": "#/definitions/Reference"
            },
            "vlan": {
              "$ref": "#/definitions/Vlan"
            },
            "vm": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "VxlanLayer2Network": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseL2Network"
        },
        {
          "properties": {
            "segment_id": {
              "type": "integer",
              "format": "int32"
            },
            "vteps": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "scope": {
              "$ref": "#/definitions/ScopeEnum"
            },
            "nsx_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "VlanL2Network": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseL2Network"
        },
        {
          "properties": {
            "vlan_id": {
              "type": "string"
            },
            "distributed_virtual_switches": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "distributed_virtual_portgroups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "BaseL2Network": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "network_addresses": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "gateways": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Vlan": {
      "type": "object",
      "properties": {
        "begin": {
          "type": "integer",
          "x-searchable": true
        },
        "end": {
          "type": "integer"
        }
      }
    },
    "NSXTIPSet": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseIPSet"
        },
        {
          "properties": {
            "nsxt_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "NSXIPSet": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseIPSet"
        },
        {
          "properties": {
            "nsx_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "scope": {
              "$ref": "#/definitions/ScopeEnum"
            }
          }
        }
      ]
    },
    "EC2IPSet": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseIPSet"
        }
      ]
    },
    "BaseIPSet": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "ip_addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpV4Address"
              }
            },
            "ip_ranges": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpAddressRange"
              }
            },
            "ip_numeric_ranges": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpNumericRange"
              }
            },
            "parent_security_groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "direct_source_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "direct_destination_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "indirect_source_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "indirect_destination_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "vendor_id": {
              "type": "string"
            },
            "vendor": {
              "type": "string"
            }
          }
        }
      ]
    },
    "IpAddressRange": {
      "properties": {
        "start_ip": {
          "type": "string"
        },
        "end_ip": {
          "type": "string"
        }
      }
    },
    "IpNumericRange": {
      "properties": {
        "start": {
          "type": "integer",
          "format": "int64"
        },
        "end": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SddcType": {
      "type": "string",
      "enum": [
        "ONPREM",
        "VMC"
      ]
    },
    "NSXPolicyGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseSecurityGroup"
        },
        {
          "properties": {
            "realized_entities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "sddc_type": {
              "$ref": "#/definitions/SddcType"
            }
          }
        }
      ]
    },
    "NSGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseSecurityGroup"
        },
        {
          "properties": {
            "nsxt_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "ip_sets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "security_tags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "NSXSecurityGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseSecurityGroup"
        },
        {
          "properties": {
            "nsx_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "scope": {
              "$ref": "#/definitions/ScopeEnum"
            },
            "ip_sets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "security_tags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "EC2SecurityGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseSecurityGroup"
        },
        {
          "properties": {
            "vpc": {
              "$ref": "#/definitions/Reference"
            },
            "region": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AzureASG": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseSecurityGroup"
        },
        {
          "properties": {
            "vnet": {
              "$ref": "#/definitions/Reference"
            },
            "region": {
              "type": "string"
            },
            "security_tags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "BaseSecurityGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/Group"
        },
        {
          "properties": {
            "direct_source_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "direct_destination_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "indirect_source_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "indirect_destination_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "parents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "direct_members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "vendor_id": {
              "type": "string"
            },
            "excluded_members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "RuleSet": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "firewall": {
          "$ref": "#/definitions/Reference"
        },
        "rule_set_type": {
          "type": "string",
          "enum": [
            "NSX_STANDARD",
            "NSX_REDIRECT",
            "AWS_STANDARD",
            "NSXT_EDGE_FIREWALL",
            "ACCESS_RULE",
            "POLICYMANAGER_EMERGENCY_TYPE",
            "POLICYMANAGER_INFRASTRUCTURE_TYPE",
            "POLICYMANAGER_ENVIRONMENT_TYPE",
            "POLICYMANAGER_APPLICATION_TYPE",
            "POLICYMANAGER_ETHERNET_TYPE"
          ]
        }
      }
    },
    "AppliedTo": {
      "type": "object",
      "properties": {
        "referred_entity": {
          "$ref": "#/definitions/EntityId"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "vendor_type": {
          "type": "string"
        }
      }
    },
    "BaseFirewallRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "rule_id": {
              "type": "string"
            },
            "section_id": {
              "type": "string"
            },
            "section_name": {
              "type": "string"
            },
            "sequence_number": {
              "type": "integer"
            },
            "source_any": {
              "type": "boolean"
            },
            "destination_any": {
              "type": "boolean"
            },
            "service_any": {
              "type": "boolean"
            },
            "sources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "destinations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "services": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "action": {
              "$ref": "#/definitions/FirewallAction"
            },
            "disabled": {
              "type": "boolean"
            },
            "source_inversion": {
              "type": "boolean"
            },
            "destination_inversion": {
              "type": "boolean"
            },
            "port_ranges": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PortRange"
              }
            }
          }
        }
      ]
    },
    "NSXFirewallRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewallRule"
        },
        {
          "properties": {
            "logging_enabled": {
              "type": "boolean"
            },
            "direction": {
              "$ref": "#/definitions/FirewallDirection"
            },
            "scope": {
              "$ref": "#/definitions/ScopeEnum"
            },
            "nsx_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "NSXTFirewallRule": {
      "allOf": [
        {
          "$ref": "#/definitions/NSXFirewallRule"
        },
        {
          "properties": {
            "applied_tos": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppliedTo"
              }
            }
          }
        }
      ]
    },
    "PolicyManagerFirewallRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewallRule"
        },
        {
          "properties": {
            "realized_entities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "sddc_type": {
              "$ref": "#/definitions/SddcType"
            }
          }
        }
      ]
    },
    "NSXRedirectRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewallRule"
        },
        {
          "properties": {
            "logging_enabled": {
              "type": "boolean"
            },
            "direction": {
              "$ref": "#/definitions/FirewallDirection"
            },
            "service_profile": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CheckpointFirewallRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseGenericFirewallRule"
        }
      ]
    },
    "BaseGenericFirewallRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewallRule"
        },
        {
          "properties": {
            "direction": {
              "$ref": "#/definitions/FirewallDirection"
            }
          }
        }
      ]
    },
    "EC2SGFirewallRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewallRule"
        },
        {
          "properties": {
            "vpc": {
              "$ref": "#/definitions/Reference"
            },
            "direction": {
              "$ref": "#/definitions/EC2FirewallDirection"
            },
            "owner_security_group": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "AzureNSGRule": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewallRule"
        },
        {
          "properties": {
            "direction": {
              "$ref": "#/definitions/EC2FirewallDirection"
            }
          }
        }
      ]
    },
    "EC2FirewallDirection": {
      "type": "string",
      "enum": [
        "INBOUND",
        "OUTBOUND"
      ]
    },
    "FirewallDirection": {
      "type": "string",
      "enum": [
        "IN",
        "OUT",
        "INOUT"
      ]
    },
    "FirewallAction": {
      "type": "string",
      "enum": [
        "ALLOW",
        "ACCEPT",
        "DENY",
        "DROP",
        "REJECT",
        "REDIRECT",
        "DO_NOT_REDIRECT"
      ]
    },
    "TopTalkerSortEnum": {
      "type": "string",
      "enum": [
        "FLOW_VOLUME",
        "FLOW_COUNT",
        "TRAFFIC_RATE",
        "SESSION_COUNT"
      ]
    },
    "AppFlowPropEnum": {
      "type": "string",
      "enum": [
        "FLOW_COUNT",
        "UNPROTECTED_FLOWS",
        "DROPPED_FLOWS",
        "INTERNET_FLOWS"
      ]
    },
    "AppFlowMetricEnum": {
      "type": "string",
      "enum": [
        "INCOMING_VOLUME",
        "OUTGOING_VOLUME"
      ]
    },
    "Group": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "VCenterManager": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseManager"
        },
        {
          "properties": {
            "ip_address": {
              "$ref": "#/definitions/IpV4Address"
            },
            "fqdn": {
              "type": "string"
            },
            "vm": {
              "$ref": "#/definitions/Reference"
            },
            "nsx_manager": {
              "$ref": "#/definitions/Reference"
            },
            "vc_uuid": {
              "type": "string"
            }
          }
        }
      ]
    },
    "NSXPolicyManager": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseNSXManager"
        },
        {
          "properties": {
            "ip_address": {
              "$ref": "#/definitions/IpV4Address"
            },
            "data_source": {
              "$ref": "#/definitions/Reference"
            },
            "fqdn": {
              "type": "string"
            },
            "enforcement_points": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "sddc_type": {
              "$ref": "#/definitions/SddcType"
            },
            "sddc": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXTManager": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseNSXManager"
        },
        {
          "properties": {
            "fqdn": {
              "type": "string"
            },
            "ip_address": {
              "$ref": "#/definitions/IpV4Address"
            },
            "version": {
              "type": "string"
            }
          }
        }
      ]
    },
    "NSXVManager": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseNSXManager"
        },
        {
          "properties": {
            "fqdn": {
              "type": "string"
            },
            "ip_address": {
              "$ref": "#/definitions/IpV4Address"
            },
            "version": {
              "type": "string"
            },
            "primary_nsx_manager": {
              "$ref": "#/definitions/Reference"
            },
            "vm": {
              "$ref": "#/definitions/Reference"
            },
            "role": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BaseNSXManager": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseManager"
        }
      ]
    },
    "CheckpointMDSManager": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewallManager"
        }
      ]
    },
    "CheckpointManager": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewallManager"
        }
      ]
    },
    "BaseFirewallManager": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseManager"
        },
        {
          "properties": {
            "nsx_manager": {
              "$ref": "#/definitions/Reference"
            },
            "version": {
              "type": "string"
            },
            "ip_address": {
              "$ref": "#/definitions/IpV4Address"
            }
          }
        }
      ]
    },
    "BaseManager": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        }
      ]
    },
    "Flow": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "source_vm": {
              "$ref": "#/definitions/Reference"
            },
            "destination_vm": {
              "$ref": "#/definitions/Reference"
            },
            "source_vnic": {
              "$ref": "#/definitions/Reference"
            },
            "destination_vnic": {
              "$ref": "#/definitions/Reference"
            },
            "source_vpc": {
              "$ref": "#/definitions/Reference"
            },
            "destination_vpc": {
              "$ref": "#/definitions/Reference"
            },
            "source_cloud_network": {
              "$ref": "#/definitions/Reference"
            },
            "destination_cloud_network": {
              "$ref": "#/definitions/Reference"
            },
            "source_azure_nsg": {
              "$ref": "#/definitions/Reference"
            },
            "destination_azure_nsg": {
              "$ref": "#/definitions/Reference"
            },
            "source_datacenter": {
              "$ref": "#/definitions/Reference"
            },
            "destination_datacenter": {
              "$ref": "#/definitions/Reference"
            },
            "source_ip": {
              "$ref": "#/definitions/IpV4Address"
            },
            "destination_ip": {
              "$ref": "#/definitions/IpV4Address"
            },
            "source_l2_network": {
              "$ref": "#/definitions/Reference"
            },
            "destination_l2_network": {
              "$ref": "#/definitions/Reference"
            },
            "port": {
              "$ref": "#/definitions/PortRange"
            },
            "source_folders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "destination_folders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "source_resource_pool": {
              "$ref": "#/definitions/Reference"
            },
            "destination_resource_pool": {
              "$ref": "#/definitions/Reference"
            },
            "source_cluster": {
              "$ref": "#/definitions/Reference"
            },
            "destination_cluster": {
              "$ref": "#/definitions/Reference"
            },
            "protocol": {
              "$ref": "#/definitions/Protocol"
            },
            "source_ip_sets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "destination_ip_sets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "source_security_groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "destination_security_groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "traffic_type": {
              "$ref": "#/definitions/FlowTrafficType"
            },
            "source_security_tags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "destination_security_tags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "source_host": {
              "$ref": "#/definitions/Reference"
            },
            "destination_host": {
              "$ref": "#/definitions/Reference"
            },
            "source_vm_tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "destination_vm_tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "within_host": {
              "type": "boolean"
            },
            "firewall_action": {
              "$ref": "#/definitions/FirewallAction"
            },
            "firewall_rule_id": {
              "type": "string"
            },
            "flow_tag": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FlowTag"
              }
            }
          }
        }
      ]
    },
    "FlowTag": {
      "type": "string",
      "enum": [
        "TAG_TRAFFIC_TYPE_UNKNOWN",
        "TAG_INTERNET_TRAFFIC",
        "TAG_EAST_WEST_TRAFFIC",
        "TAG_VM_VM_TRAFFIC",
        "TAG_VM_PHY_TRAFFIC",
        "TAG_PHY_PHY_TRAFFIC",
        "TAG_SRC_IP_VMKNIC",
        "TAG_DST_IP_VMKNIC",
        "TAG_SRC_IP_VM",
        "TAG_DST_IP_VM",
        "TAG_SRC_IP_INTERNET",
        "TAG_DST_IP_INTERNET",
        "TAG_SRC_IP_PHYSICAL",
        "TAG_DST_IP_PHYSICAL",
        "TAG_SAME_HOST",
        "TAG_DIFF_HOST",
        "TAG_SHARED_SERVICE",
        "TAG_NOT_SHARED_SERVICE",
        "TAG_NETWORK_SWITCHED",
        "TAG_NETWORK_ROUTED",
        "TAG_NETWORK_UNKNOWN",
        "TAG_SRC_IP_VTEP",
        "TAG_DST_IP_VTEP",
        "TAG_UNICAST",
        "TAG_BROADCAST",
        "TAG_MULTICAST",
        "TAG_SRC_IP_LINK_LOCAL",
        "TAG_DST_IP_LINK_LOCAL",
        "TAG_SRC_IP_CLASS_E",
        "TAG_DST_IP_CLASS_E",
        "TAG_SRC_IP_CLASS_A_RESERVED",
        "TAG_DST_IP_CLASS_A_RESERVED",
        "TAG_INVALID_IP_PACKETS",
        "TAG_NOT_ANALYZED",
        "TAG_GENERIC_INTERNET_SRC_IP",
        "TAG_SNAT_DNAT_FLOW",
        "TAG_MULTINICS",
        "TAG_SRC_VC",
        "TAG_DST_VC",
        "TAG_SRC_AWS",
        "TAG_DST_AWS",
        "TAG_WITHIN_DC",
        "TAG_DIFF_DC",
        "TAG_WITHIN_VPC",
        "TAG_DIFF_VPC",
        "TAG_WITHIN_VNET",
        "TAG_DIFF_VNET",
        "TAG_SRC_AZURE",
        "TAG_DST_AZURE"
      ]
    },
    "Protocol": {
      "type": "string",
      "enum": [
        "TCP",
        "UDP",
        "OTHER"
      ]
    },
    "FlowTrafficType": {
      "type": "string",
      "enum": [
        "INTERNET_TRAFFIC",
        "EAST_WEST_TRAFFIC"
      ]
    },
    "ScopeEnum": {
      "type": "string",
      "enum": [
        "UNIVERSAL",
        "GLOBAL",
        "LOCAL"
      ]
    },
    "PortRange": {
      "type": "object",
      "properties": {
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "end": {
          "type": "integer",
          "format": "int32"
        },
        "display": {
          "type": "string"
        },
        "iana_name": {
          "type": "string"
        },
        "iana_port_display": {
          "type": "string"
        }
      }
    },
    "SimplePortRange": {
      "type": "object",
      "properties": {
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "end": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NSService": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseService"
        },
        {
          "properties": {
            "nsxt_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "vendor_id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "NSXService": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseService"
        },
        {
          "properties": {
            "nsx_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "scope": {
              "$ref": "#/definitions/ScopeEnum"
            },
            "vendor_id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BaseService": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "protocol": {
              "type": "string"
            },
            "port_ranges": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PortRange"
              }
            }
          }
        }
      ]
    },
    "EC2Service": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseService"
        }
      ]
    },
    "NSServiceGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseServiceGroup"
        },
        {
          "properties": {
            "nsxt_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "vendor_id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "NSXServiceGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseServiceGroup"
        },
        {
          "properties": {
            "scope": {
              "$ref": "#/definitions/ScopeEnum"
            },
            "nsx_managers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "vendor_id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BaseServiceGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/Group"
        }
      ]
    },
    "VPC": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "cidr_block": {
              "$ref": "#/definitions/IpV4Address"
            },
            "state": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "default_vpc": {
              "type": "boolean"
            },
            "vendor_id": {
              "type": "string"
            },
            "last_synched_time": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "CloudNetwork": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "peer_cloud_networks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "address_spaces": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpV4Address"
              }
            },
            "provisioned_state": {
              "type": "string"
            },
            "regions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "vendor_id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "NSXDistributedFirewall": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewall"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "EC2Firewall": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewall"
        }
      ]
    },
    "AzureNSG": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewall"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "NSXTFirewall": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewall"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PolicyManagerFirewall": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewall"
        },
        {
          "properties": {
            "firewall_sections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "sddc_type": {
              "$ref": "#/definitions/SddcType"
            }
          }
        }
      ]
    },
    "CheckpointFirewall": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseGenericFirewall"
        }
      ]
    },
    "BaseGenericFirewall": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseFirewall"
        }
      ]
    },
    "BaseFirewall": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "firewall_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleSet"
              }
            },
            "exclusions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "SearchRequest": {
      "type": "object",
      "properties": {
        "entity_type": {
          "$ref": "#/definitions/AllEntityType"
        },
        "filter": {
          "type": "string",
          "description": "query filter"
        },
        "sort_by": {
          "$ref": "#/definitions/SortByClause"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "cursor": {
          "type": "string"
        },
        "time_range": {
          "$ref": "#/definitions/TimeRange"
        }
      }
    },
    "SortByClause": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "order": {
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      }
    },
    "TimeRange": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "integer",
          "format": "int64",
          "description": "Start timestamp of the window of the objects returned",
          "example": 1597247025
        },
        "end_time": {
          "type": "integer",
          "format": "int64",
          "description": "End timestamp of the window of the objects returned",
          "example": 1597247999
        }
      }
    },
    "IncludeExternal": {
      "type": "boolean",
      "default": false
    },
    "AggregateOrderByClause": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "aggregation_type": {
          "type": "string",
          "enum": [
            "SUM",
            "MIN",
            "MAX",
            "AVG"
          ]
        },
        "order": {
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      }
    },
    "SearchGroupByRequest": {
      "type": "object",
      "properties": {
        "entity_type": {
          "$ref": "#/definitions/AllEntityType"
        },
        "filter": {
          "type": "string",
          "description": "query filter"
        },
        "aggregations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aggregation"
          }
        },
        "group_by": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sort_by": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregateOrderByClause"
          }
        },
        "time_range": {
          "$ref": "#/definitions/TimeRange"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "cursor": {
          "type": "string"
        }
      },
      "example": {
        "entity_type": "Flow",
        "filter": "destination_ip.ip_address = '1.1.1.1'",
        "aggregations": [
          {
            "field": "flow.totalBytes.delta.summation.bytes",
            "aggregation_type": "SUM"
          }
        ],
        "time_range": {
          "start_time": 1534410000,
          "end_time": 1534410559
        },
        "group_by": [
          "source_ip",
          "destination_ip"
        ],
        "size": 2,
        "sort_by": [
          {
            "field": "flow.totalBytes.delta.summation.bytes",
            "aggregation_type": "SUM",
            "order": "DESC"
          }
        ]
      }
    },
    "AggregationRequest": {
      "type": "object",
      "properties": {
        "entity_type": {
          "$ref": "#/definitions/AllEntityType"
        },
        "filter": {
          "type": "string",
          "description": "query filter"
        },
        "aggregations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aggregation"
          }
        },
        "time_range": {
          "$ref": "#/definitions/TimeRange"
        }
      },
      "example": {
        "entity_type": "Flow",
        "filter": "destination_ip.ip_address = '1.1.1.1'",
        "aggregations": [
          {
            "field": "flow.totalBytes.delta.summation.bytes",
            "aggregation_type": "SUM"
          }
        ],
        "time_range": {
          "start_time": 1534410000,
          "end_time": 1534410559
        }
      }
    },
    "Aggregation": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "example": "flow.totalBytes.delta.summation.bytes"
        },
        "aggregation_type": {
          "type": "string",
          "enum": [
            "SUM",
            "MIN",
            "MAX",
            "AVG"
          ]
        }
      }
    },
    "AggregationWithValue": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "aggregation_type": {
          "type": "string",
          "enum": [
            "SUM",
            "MIN",
            "MAX",
            "AVG"
          ]
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "AggregationResponse": {
      "type": "object",
      "properties": {
        "aggregations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationWithValue"
          }
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "description": "Total count of objects returned",
          "example": 100
        },
        "start_time": {
          "type": "integer",
          "format": "int64",
          "description": "Start timestamp of the window of the objects returned",
          "example": 1597247025
        },
        "end_time": {
          "type": "integer",
          "format": "int64",
          "description": "End timestamp of the window of the objects returned",
          "example": 1597247999
        }
      }
    },
    "Cardinality": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int64"
        },
        "is_approx": {
          "type": "boolean"
        }
      }
    },
    "SearchGroupByResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupWithValue"
          }
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "total_bucket": {
          "$ref": "#/definitions/Cardinality"
        },
        "total_count": {
          "type": "integer",
          "format": "int32",
          "description": "Total count of objects returned",
          "example": 1000
        },
        "time_range": {
          "$ref": "#/definitions/TimeRange"
        },
        "cursor": {
          "type": "string",
          "description": "Cursor for the next page",
          "example": "MTA="
        }
      }
    },
    "GroupWithValue": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BucketValue"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "count of entity in group",
          "example": 100
        },
        "aggregations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationWithValue"
          }
        }
      }
    },
    "BucketValue": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ProblemEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEvent"
        },
        {
          "properties": {
            "severity": {
              "type": "string",
              "enum": [
                "CRITICAL",
                "MODERATE",
                "WARNING",
                "INFO"
              ]
            },
            "event_close_time_epoch_ms": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "FirewallRuleMaskEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/ProblemEvent"
        },
        {
          "properties": {
            "maskedRule": {
              "$ref": "#/definitions/Reference"
            },
            "maskingRule": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "BaseEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "anchor_entities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "related_entities": {
              "type": "array",
              "description": "The entity IDs of all related objects",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "message": {
              "type": "string",
              "description": "Event message"
            },
            "event_tags": {
              "type": "array",
              "description": "Event tags",
              "items": {
                "type": "string"
              }
            },
            "admin_state": {
              "type": "string",
              "description": "Administrative state of the event",
              "enum": [
                "ENABLED",
                "DISABLED"
              ]
            },
            "archived": {
              "type": "boolean",
              "description": "Whether of not the event is archived",
              "example": false
            },
            "event_time_epoch_ms": {
              "type": "integer",
              "format": "int64",
              "description": "Epoc timestamp of when the event was triggered"
            },
            "event_type": {
              "type": "string",
              "description": "The type of event",
              "example": "UserDefinedEvent"
            },
            "recommendations": {
              "type": "array",
              "description": "A list of recommended remedies",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "PagedListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "description": "Array with resulting objects and their information",
          "items": {
            "$ref": "#/definitions/EntityId"
          }
        },
        "cursor": {
          "type": "string",
          "description": "Cursor for the next page",
          "example": "MTA="
        },
        "total_count": {
          "type": "integer",
          "description": "Total number of objects",
          "example": 1102
        },
        "start_time": {
          "type": "integer",
          "format": "int64",
          "description": "Start timestamp of the window of the objects returned",
          "example": 1597247025
        },
        "end_time": {
          "type": "integer",
          "format": "int64",
          "description": "End timestamp of the window of the objects returned",
          "example": 1597247999
        }
      }
    },
    "PagedEntityPairListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "description": "Array of a source and destination pair",
          "items": {
            "$ref": "#/definitions/EntityPair"
          }
        },
        "cursor": {
          "type": "string",
          "description": "Cursor for the next page",
          "example": "MTA="
        },
        "total_count": {
          "type": "integer",
          "description": "Total number of objects in the system, despite the page limit",
          "example": 1102
        },
        "start_time": {
          "type": "integer",
          "format": "int64",
          "description": "Start timestamp of the window of the objects returned",
          "example": 1597247025
        },
        "end_time": {
          "type": "integer",
          "format": "int64",
          "description": "End timestamp of the window of the objects returned",
          "example": 1597247999
        }
      }
    },
    "PagedApplicationListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "description": "Array of returned applications",
          "items": {
            "$ref": "#/definitions/Application"
          }
        },
        "cursor": {
          "type": "string",
          "description": "Cursor for the next page",
          "example": "MTA="
        },
        "total_count": {
          "type": "integer",
          "description": "Total number of objects in the system, despite the page limit",
          "example": 1102
        }
      }
    },
    "SimpleListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityId"
          }
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "TierListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tier"
          }
        }
      }
    },
    "DataSourceListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceEntityId"
          }
        },
        "total_count": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "NodeListResult": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeId"
          }
        },
        "total_count": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "PagedListResponseWithTime": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityIdWithTime"
          }
        },
        "cursor": {
          "type": "string",
          "description": "Cursor for the next page",
          "example": "ML12eu02=="
        },
        "total_count": {
          "type": "integer",
          "example": 100,
          "description": "Total number of objects returned"
        },
        "start_time": {
          "type": "integer",
          "format": "int64",
          "example": 1504739809,
          "description": "Start timestamp of the window of the objects returned"
        },
        "end_time": {
          "type": "integer",
          "format": "int64",
          "example": 1504739809,
          "description": "End timestamp of the window of the objects returned"
        }
      }
    },
    "BaseEntity": {
      "type": "object",
      "discriminator": "entity_type",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity ID that can be references in detail API calls",
          "example": "1000:104:12213212"
        },
        "name": {
          "type": "string",
          "description": "Name of the object",
          "example": "My Name"
        },
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        }
      }
    },
    "DataSourceType": {
      "type": "string",
      "enum": [
        "CiscoSwitchDataSource",
        "DellSwitchDataSource",
        "AristaSwitchDataSource",
        "BrocadeSwitchDataSource",
        "JuniperSwitchDataSource",
        "GDDataSource",
        "F5BIGIPDataSource",
        "NSXALBDataSource",
        "HuaweiSwitchDataSource",
        "MellanoxSwitchDataSource",
        "HPESwitchDataSource",
        "CiscoASRXRDataSource",
        "UANIDataSource",
        "VCenterDataSource",
        "NSXVManagerDataSource",
        "UCSManagerDataSource",
        "HPVCManagerDataSource",
        "HPOneViewDataSource",
        "PanFirewallDataSource",
        "CheckpointFirewallDataSource",
        "FortinetFirewallDataSource",
        "NSXTManagerDataSource",
        "KubernetesDataSource",
        "PKSDataSource",
        "InfobloxManagerDataSource",
        "CiscoACIDataSource",
        "ServiceNowDataSource",
        "PolicyManagerDataSource",
        "AzureDataSource",
        "VeloCloudDataSource",
        "AWSDataSource",
        "HcxDataSource"
      ]
    },
    "NodeId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Entity Identifier",
          "example": "1000:104:12213212"
        },
        "entity_type": {
          "$ref": "#/definitions/NodeType"
        }
      }
    },
    "NodeType": {
      "type": "string",
      "enum": [
        "Node"
      ]
    },
    "EntityType": {
      "type": "string",
      "description": "The entity type of an object. This is how vRNI identifies different objects like VMs, Hosts, Switches, etc.",
      "example": "VirtualMachine",
      "enum": [
        "VirtualMachine",
        "EC2Instance",
        "Host",
        "Vnic",
        "Vmknic",
        "VxlanLayer2Network",
        "VlanL2Network",
        "Cluster",
        "SecurityTag",
        "ResourcePool",
        "NSXIPSet",
        "NSXTIPSet",
        "EC2IPSet",
        "NSXSecurityGroup",
        "NSGroup",
        "NSXPolicyGroup",
        "EC2SecurityGroup",
        "Flow",
        "ProblemEvent",
        "Application",
        "Tier",
        "IPEndpoint",
        "NSXFirewallRule",
        "EC2SGFirewallRule",
        "NSXRedirectRule",
        "VCenterManager",
        "NSXVManager",
        "NSXTManager",
        "NSXPolicyManager",
        "CheckpointManager",
        "CheckpointMDSManager",
        "NSXService",
        "EC2Service",
        "NSService",
        "VPC",
        "CloudNetwork",
        "AzureVM",
        "AzureNSG",
        "AzureASG",
        "AzureNSGRule",
        "NSXDistributedFirewall",
        "EC2Firewall",
        "NSXServiceGroup",
        "NSServiceGroup",
        "DistributedVirtualSwitch",
        "DistributedVirtualPortgroup",
        "VCDatacenter",
        "Datastore",
        "Folder",
        "NSXTFirewallRule",
        "NSXTFirewall",
        "PolicyManagerFirewallRule",
        "PolicyManagerFirewall",
        "KubernetesService",
        "CheckpointFirewall",
        "CheckpointFirewallRule",
        "UserDefinedSubnet",
        "UserDefinedProblemEvent",
        "FirewallRuleMaskEvent",
        "EdgeDevice",
        "RouterDevice",
        "NSXController",
        "LogicalRouter",
        "NSXTManagementNode",
        "NSXTController",
        "NSXTTransportNode",
        "NSXTTransportZone",
        "NSXTLoadBalancer",
        "NSXTVirtualServer",
        "NSXTServerPool",
        "NSXTLogicalSwitch",
        "NSXTRouterDevice",
        "NSXTEdgeCluster",
        "NSXControllerCluster",
        "AzureSubscription",
        "AWSAccountManager",
        "HcxDataSource"
      ]
    },
    "MetaEntityType": {
      "type": "string",
      "enum": [
        "Group",
        "BaseSecurityGroup",
        "BaseEvent",
        "BaseVirtualMachine",
        "BaseFirewallRule",
        "BaseIPSet",
        "BaseL2Network",
        "BaseManager",
        "BaseFirewallManager",
        "BaseGenericFirewall",
        "BaseGenericFirewallRule",
        "BaseNSXManager",
        "BaseFirewall",
        "BaseService",
        "BaseServiceGroup",
        "BaseVnic"
      ]
    },
    "AllEntityType": {
      "type": "string",
      "enum": [
        "Group",
        "BaseSecurityGroup",
        "BaseEvent",
        "BaseVirtualMachine",
        "BaseFirewallRule",
        "BaseIPSet",
        "BaseL2Network",
        "BaseFirewall",
        "BaseService",
        "BaseServiceGroup",
        "BaseVnic",
        "VirtualMachine",
        "EC2Instance",
        "Host",
        "Vnic",
        "Vmknic",
        "VxlanLayer2Network",
        "VlanL2Network",
        "Cluster",
        "SecurityTag",
        "ResourcePool",
        "NSXIPSet",
        "NSXTIPSet",
        "EC2IPSet",
        "NSXSecurityGroup",
        "NSGroup",
        "NSXPolicyGroup",
        "EC2SecurityGroup",
        "Flow",
        "ProblemEvent",
        "Application",
        "Tier",
        "IPEndpoint",
        "NSXFirewallRule",
        "EC2SGFirewallRule",
        "NSXRedirectRule",
        "VCenterManager",
        "NSXVManager",
        "NSXTManager",
        "NSXPolicyManager",
        "CheckpointManager",
        "CheckpointMDSManager",
        "BaseManager",
        "BaseFirewallManager",
        "BaseNSXManager",
        "NSXService",
        "EC2Service",
        "NSService",
        "VPC",
        "CloudNetwork",
        "AzureVM",
        "AzureNSG",
        "AzureASG",
        "AzureNSGRule",
        "NSXDistributedFirewall",
        "EC2Firewall",
        "NSXServiceGroup",
        "NSServiceGroup",
        "DistributedVirtualSwitch",
        "DistributedVirtualPortgroup",
        "VCDatacenter",
        "Datastore",
        "Folder",
        "NSXTFirewallRule",
        "NSXTFirewall",
        "PolicyManagerFirewallRule",
        "PolicyManagerFirewall",
        "BaseGenericFirewall",
        "BaseGenericFirewallRule",
        "CheckpointFirewall",
        "CheckpointFirewallRule",
        "UserDefinedSubnet",
        "KubernetesService",
        "UserDefinedProblemEvent",
        "FirewallRuleMaskEvent",
        "EdgeDevice",
        "RouterDevice",
        "NSXController",
        "LogicalRouter",
        "NSXTManagementNode",
        "NSXTController",
        "NSXTTransportNode",
        "NSXTTransportZone",
        "NSXTLoadBalancer",
        "NSXTVirtualServer",
        "NSXTServerPool",
        "NSXTLogicalSwitch",
        "NSXTRouterDevice",
        "NSXTEdgeCluster",
        "NSXControllerCluster",
        "AzureSubscription",
        "AWSAccountManager",
        "HcxDataSource"
      ]
    },
    "Node": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "entity_type": {
          "$ref": "#/definitions/NodeType"
        },
        "node_type": {
          "type": "string",
          "enum": [
            "PROXY_VM",
            "PLATFORM_VM"
          ]
        },
        "node_id": {
          "type": "string"
        },
        "ip_address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Application": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "create_time": {
              "type": "integer",
              "format": "int64",
              "description": "Timestamp of when the object was created",
              "example": 159724400600
            },
            "created_by": {
              "type": "string",
              "description": "The username of who created the object",
              "example": "admin@local"
            },
            "last_modified_time": {
              "type": "integer",
              "format": "int64",
              "description": "Timestamp of when the object was last modified",
              "example": 159724400600
            },
            "last_modified_by": {
              "type": "string",
              "description": "The username of who last modified the object",
              "example": "someone@else.com"
            }
          }
        }
      ]
    },
    "ApplicationRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the application",
          "example": "My-3Tier-App"
        }
      }
    },
    "GroupsMembersRequest": {
      "type": "object",
      "properties": {
        "entity_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cursor": {
          "type": "string"
        }
      },
      "example": {
        "entity_ids": [
          "10000:561:123456789",
          "10000:561:987654321"
        ],
        "cursor": "CKWP=="
      }
    },
    "TierRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "group_membership_criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupMembershipCriteria"
          }
        }
      },
      "example": {
        "name": "tier-1",
        "group_membership_criteria": [
          {
            "membership_type": "SearchMembershipCriteria",
            "search_membership_criteria": {
              "entity_type": "VirtualMachine",
              "filter": "security_groups.entity_id = '18230:82:604573173'"
            }
          }
        ]
      }
    },
    "Tier": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "group_membership_criteria": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupMembershipCriteria"
              }
            },
            "application": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "GroupMembershipCriteria": {
      "type": "object",
      "description": "EntityType currently restricted to VirtualMachine",
      "properties": {
        "membership_type": {
          "type": "string",
          "enum": [
            "SearchMembershipCriteria",
            "IPAddressMembershipCriteria"
          ]
        },
        "ip_address_membership_criteria": {
          "$ref": "#/definitions/IpAddressMembershipCriteria"
        },
        "search_membership_criteria": {
          "$ref": "#/definitions/SearchMembershipCriteria"
        }
      }
    },
    "SearchMembershipCriteria": {
      "type": "object",
      "properties": {
        "entity_type": {
          "$ref": "#/definitions/AllEntityType"
        },
        "filter": {
          "type": "string",
          "description": "As defined in search end point"
        }
      }
    },
    "IpAddressMembershipCriteria": {
      "type": "object",
      "description": "Ip Address membership definition",
      "properties": {
        "ip_addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "IPEndpoint": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "ip_address": {
              "$ref": "#/definitions/IpV4Address"
            },
            "fqdns": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "RecommendedRules": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecommendedRule"
          }
        },
        "time_range": {
          "$ref": "#/definitions/TimeRange"
        }
      }
    },
    "RecommendedRule": {
      "type": "object",
      "properties": {
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "port_ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimplePortRange"
          }
        },
        "action": {
          "type": "string",
          "enum": [
            "ALLOW",
            "DROP"
          ]
        }
      }
    },
    "RecommendedRulesRequest": {
      "type": "object",
      "properties": {
        "group_1": {
          "$ref": "#/definitions/MicroSecGroup"
        },
        "group_2": {
          "$ref": "#/definitions/MicroSecGroup"
        },
        "time_range": {
          "$ref": "#/definitions/TimeRange"
        },
        "include_external": {
          "type": "boolean",
          "description": "When True, includes ungrouped endpoints outside defined scope",
          "default": false
        }
      },
      "example": {
        "group_1": {
          "entity": {
            "entity_type": "Tier",
            "entity_id": "10000:562:1904698621"
          }
        },
        "group_2": {
          "entity": {
            "entity_type": "Tier",
            "entity_id": "10000:562:1780351215"
          }
        }
      }
    },
    "MicroSecGroup": {
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Reference"
        }
      }
    },
    "NamesRequest": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameRequestParam"
          }
        }
      }
    },
    "NameRequestParam": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "time": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "NamesResponse": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityName"
          }
        }
      }
    },
    "EntityName": {
      "allOf": [
        {
          "$ref": "#/definitions/EntityIdWithTime"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ApiError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          }
        }
      }
    },
    "ErrorDetail": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "target": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VersionResponse": {
      "type": "object",
      "properties": {
        "api_version": {
          "type": "string"
        }
      }
    },
    "IpTag": {
      "type": "object",
      "properties": {
        "tag_id": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ip_address_ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IpAddressRange"
          }
        }
      }
    },
    "IpTagIdList": {
      "type": "object",
      "properties": {
        "tag_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SubnetMappingRequest": {
      "type": "object",
      "properties": {
        "cidr": {
          "type": "string"
        },
        "vlan_id": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SubnetMapping": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "cidr": {
              "type": "string"
            },
            "vlan_id": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "SubnetMappingList": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubnetMapping"
          }
        }
      }
    },
    "ApplicationsMembersResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationMembersResponse"
          }
        },
        "cursor": {
          "type": "string"
        },
        "total_count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TiersMembersResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TierMembersResponse"
          }
        },
        "cursor": {
          "type": "string"
        },
        "total_count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ApplicationMembersResponse": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "creation_time": {
          "type": "integer",
          "format": "int64"
        },
        "last_modified_by": {
          "type": "string"
        },
        "last_modified_time": {
          "type": "integer",
          "format": "int64"
        },
        "source": {
          "type": "string",
          "enum": [
            "MANUAL",
            "PATTERN_BASED",
            "SERVICE_NOW",
            "FLOW_BASED_DISCOVERY"
          ]
        },
        "tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TierMembersResponse"
          }
        }
      }
    },
    "TierMembersResponse": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationMember"
          }
        }
      }
    },
    "ApplicationMembers": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationMember"
          }
        },
        "cursor": {
          "type": "string"
        }
      }
    },
    "ApplicationMember": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "type": "string"
        },
        "vendor_infos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VendorInfo"
          }
        }
      }
    },
    "VendorInfo": {
      "type": "object",
      "properties": {
        "vendor_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VendorId"
          }
        },
        "manager": {
          "$ref": "#/definitions/Reference"
        }
      }
    },
    "VendorId": {
      "type": "object",
      "properties": {
        "id_type": {
          "type": "string"
        },
        "id_value": {
          "type": "string"
        }
      }
    },
    "Manager": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "type": "string"
        }
      }
    },
    "ApplicationFlowData": {
      "type": "object",
      "properties": {
        "application_id": {
          "type": "string",
          "description": "The entity ID of the application this flow is attached",
          "example": "18230:3:187309184"
        },
        "flow_data": {
          "type": "array",
          "description": "The flow data",
          "items": {
            "$ref": "#/definitions/FlowData"
          }
        }
      }
    },
    "FlowData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "ApplicationTopTalkingMemberData": {
      "type": "object",
      "properties": {
        "application_id": {
          "type": "string",
          "description": "The entity ID of the application this flow is attached",
          "example": "18230:3:187309184"
        },
        "top_talker_member": {
          "type": "array",
          "description": "List of objects that are the top talkers",
          "items": {
            "$ref": "#/definitions/TopTalkingMemberData"
          }
        }
      }
    },
    "TopTalkingMemberData": {
      "type": "object",
      "properties": {
        "sort_criteria": {
          "$ref": "#/definitions/TopTalkerSortEnum"
        },
        "sorted_list": {
          "$ref": "#/definitions/PagedListResponse"
        }
      }
    },
    "ApplicationTopTalkingPairData": {
      "type": "object",
      "properties": {
        "application_id": {
          "type": "string",
          "description": "The entity ID of the application this flow is attached",
          "example": "18230:3:187309184"
        },
        "top_talker_member": {
          "type": "array",
          "description": "List of objects that are the top talkers",
          "items": {
            "$ref": "#/definitions/TopTalkingPairData"
          }
        }
      }
    },
    "TopTalkingPairData": {
      "type": "object",
      "properties": {
        "sort_criteria": {
          "$ref": "#/definitions/TopTalkerSortEnum"
        },
        "sorted_list": {
          "$ref": "#/definitions/PagedEntityPairListResponse"
        }
      }
    },
    "ApplicationFlowSummary": {
      "type": "object",
      "properties": {
        "service_endpoint_count": {
          "type": "integer",
          "default": 0
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupEntry"
          }
        },
        "start_time": {
          "type": "integer",
          "format": "int64",
          "description": "Start timestamp of the window of the objects returned",
          "example": 1597247025
        },
        "end_time": {
          "type": "integer",
          "format": "int64",
          "description": "End timestamp of the window of the objects returned",
          "example": 1597247999
        }
      }
    },
    "GroupEntry": {
      "type": "object",
      "properties": {
        "group_id": {
          "type": "string"
        },
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "type": "string"
        },
        "flow_summary": {
          "$ref": "#/definitions/FlowSummary"
        }
      }
    },
    "FlowSummary": {
      "type": "object",
      "properties": {
        "ingress_bytes": {
          "type": "integer",
          "format": "int64",
          "default": 0,
          "description": "Incoming traffic in bytes"
        },
        "egress_bytes": {
          "type": "integer",
          "format": "int64",
          "default": 0,
          "description": "Outgoing traffic in bytes"
        }
      }
    },
    "EntityWithTime": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity Identifier",
          "example": "18230:3:187309184"
        },
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        },
        "entity": {
          "$ref": "#/definitions/BaseEntity"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "description": "The timestamp of this object"
        }
      }
    },
    "BulkFetchResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityWithTime"
          }
        }
      }
    },
    "EntityMetricsSchema": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricSchema"
          }
        }
      }
    },
    "MetricSchema": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "intervals": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "description": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "MetricResponse": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "interval": {
          "type": "integer"
        },
        "unit": {
          "type": "string"
        },
        "pointlist": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "start": {
          "type": "integer",
          "format": "int64"
        },
        "end": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PathFirewallRules": {
      "type": "object",
      "properties": {
        "firewalls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FirewallRuleSet"
          }
        }
      }
    },
    "FirewallRuleSet": {
      "type": "object",
      "properties": {
        "firewall_entity_id": {
          "$ref": "#/definitions/Reference"
        },
        "vendor_info": {
          "$ref": "#/definitions/VendorInfo"
        },
        "manager": {
          "$ref": "#/definitions/Reference"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseFirewallRule"
          }
        }
      }
    },
    "PathFirewallRulesRequest": {
      "type": "object",
      "properties": {
        "source_ip_address": {
          "type": "string",
          "description": "Source IP configured in firewall rule",
          "example": "2.2.2.2"
        },
        "destination_ip_address": {
          "type": "string",
          "description": "Destination IP configured in firewall rule",
          "example": "1.1.1.1"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Port number configured in firewall rule",
          "example": 80
        },
        "protocol": {
          "type": "string",
          "description": "Protocol configured in firewall rule",
          "example": "TCP"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of object"
        }
      }
    },
    "AuditRequest": {
      "type": "object",
      "properties": {
        "user_name": {
          "type": "string",
          "description": "Username making the change",
          "example": "admin@local"
        },
        "ip_address": {
          "type": "string",
          "description": "Client IP that is making the change",
          "example": "192.168.0.1"
        },
        "entity_type": {
          "type": "string",
          "description": "Entity Type of object being changed",
          "example": "VCenterDataSource"
        },
        "entity_id": {
          "type": "string",
          "description": "Entity ID of object being changed",
          "example": "18230:3:187309184"
        },
        "operation": {
          "type": "string",
          "description": "Operation on object being changed",
          "example": "UPDATE"
        },
        "response": {
          "type": "string",
          "description": "Response from vRNI, whether it's successfull or not"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "cursor": {
          "type": "string",
          "description": "Cursor for the next page of logs",
          "example": "MTA="
        },
        "time_range": {
          "$ref": "#/definitions/TimeRange"
        }
      },
      "example": {
        "username": "admin@local",
        "operation": "LOGIN",
        "time_range": {
          "start_time": 1534410000,
          "end_time": 1534410559
        },
        "size": 10,
        "cursor": "string"
      }
    },
    "AuditListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditResponse"
          }
        },
        "cursor": {
          "type": "string",
          "example": "ML12eu02==",
          "description": "Cursor for the next page of logs"
        },
        "start_time": {
          "type": "integer",
          "format": "int64",
          "description": "Start timestamp of the window of the objects returned",
          "example": 1504739809
        },
        "end_time": {
          "type": "integer",
          "format": "int64",
          "description": "End timestamp of the window of the objects returned",
          "example": 1504739809
        }
      }
    },
    "AuditResponse": {
      "type": "object",
      "properties": {
        "ip_address": {
          "type": "string"
        },
        "user_name": {
          "type": "string"
        },
        "entity_type": {
          "type": "string"
        },
        "entity_id": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "response": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserUpdateRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "admin@local"
        },
        "new_password": {
          "type": "string",
          "example": "password"
        }
      }
    },
    "InterfaceWANConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "MPLS",
            "INTERNET",
            "OTHER"
          ]
        }
      }
    },
    "WANConfig": {
      "type": "object",
      "properties": {
        "site": {
          "type": "string",
          "description": "Site name of the WAN router",
          "example": "Washington DC"
        },
        "region": {
          "type": "string",
          "description": "Region name of the WAN router",
          "example": "US East"
        },
        "interfaces": {
          "type": "array",
          "description": "Interface mappings for MPLS, INTERNET, or OTHER connections",
          "items": {
            "$ref": "#/definitions/InterfaceWANConfig"
          }
        }
      }
    },
    "SubscriptionRequest": {
      "type": "object",
      "properties": {
        "event_name": {
          "type": "string"
        },
        "is_problem": {
          "type": "boolean"
        },
        "severity": {
          "type": "string"
        },
        "search_criteria": {
          "type": "string"
        },
        "generate_event_criteria": {
          "$ref": "#/definitions/GenerateEventCritera"
        },
        "email_frequency": {
          "$ref": "#/definitions/EmailFrequency"
        },
        "daily_at_utc": {
          "type": "string"
        },
        "email_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "snmp_trap_entity_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Severity": {
      "type": "string",
      "enum": [
        "Critical",
        "Moderate",
        "Warning",
        "Info"
      ]
    },
    "GenerateEventCritera": {
      "type": "string",
      "enum": [
        "SEARCH_RESULT_CHANGE",
        "ZERO_SEARCH_RESULTS"
      ]
    },
    "EmailFrequency": {
      "type": "string",
      "enum": [
        "IMMEDIATELY",
        "DAILY_DIGEST"
      ]
    },
    "SubscriptionResponse": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "event_name": {
          "type": "string"
        },
        "is_problem": {
          "type": "boolean"
        },
        "severity": {
          "$ref": "#/definitions/Severity"
        },
        "search_criteria": {
          "type": "string"
        },
        "generate_event_criteria": {
          "$ref": "#/definitions/GenerateEventCritera"
        },
        "email_frequency": {
          "$ref": "#/definitions/EmailFrequency"
        },
        "daily_at_utc": {
          "type": "string"
        },
        "email_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "snmp_trap_entity_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SubscriptionListResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionResponse"
          }
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "EventMetaInfoResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventMetaInfo"
          }
        }
      }
    },
    "EventMetaInfo": {
      "type": "object",
      "properties": {
        "entity_type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "help_text": {
          "type": "string"
        },
        "severity": {
          "type": "string",
          "enum": [
            "Critical",
            "Warning",
            "Moderate",
            "Info"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supported_entity_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supported_manager_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "impact": {
          "type": "string",
          "enum": [
            "Network Disruption Risk",
            "Availability Risk",
            "Operations",
            "Optimization",
            "Performance",
            "Security Risk",
            "Health",
            "Wastage",
            "Communication Failure",
            "Sync",
            "NA"
          ]
        },
        "recommendations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BulkUserDefinedProblemFetchResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDefinedProblemWithTime"
          }
        }
      }
    },
    "UserDefinedProblemWithTime": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity Identifier"
        },
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        },
        "entity": {
          "$ref": "#/definitions/UserDefinedProblemEvent"
        },
        "time": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserDefinedProblemEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/ProblemEvent"
        },
        {
          "properties": {
            "total_count": {
              "type": "integer",
              "format": "int64"
            },
            "refs_added_count": {
              "type": "integer",
              "format": "int64"
            },
            "refs_deleted_count": {
              "type": "integer",
              "format": "int64"
            },
            "subscriptions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "VendorInfoWithMk": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "type": "string"
        },
        "entity_name": {
          "type": "string"
        },
        "vendor_ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VendorId"
          }
        }
      }
    },
    "DetailedVendorInfo": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VendorInfoWithMk"
        },
        {
          "properties": {
            "manager": {
              "$ref": "#/definitions/VendorInfoWithMk"
            }
          }
        }
      ]
    },
    "DetailedVendorInfoResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DetailedVendorInfo"
          }
        }
      }
    },
    "BulkProblemFetchResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProblemWithTime"
          }
        }
      }
    },
    "ProblemWithTime": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Entity Identifier"
        },
        "entity_type": {
          "$ref": "#/definitions/EntityType"
        },
        "entity": {
          "$ref": "#/definitions/ProblemEvent"
        },
        "time": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EdgeDevice": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "RouterDevice": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXController": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "LogicalRouter": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "sub_types": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXTManagementNode": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXTController": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXTTransportNode": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXTTransportZone": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXTLoadBalancer": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXTVirtualServer": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXTServerPool": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXTLogicalSwitch": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXTRouterDevice": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXTEdgeCluster": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager": {
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "NSXControllerCluster": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "manager": {
              "$ref": "#/definitions/Reference"
            },
            "controllers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "AzureSubscription": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "secondary_id": {
              "type": "string"
            },
            "manager_id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AWSAccountManager": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseEntity"
        },
        {
          "properties": {
            "vendor_id": {
              "type": "string"
            },
            "manager_id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "HcxDataSourceRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSourceRequest"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            }
          },
          "required": [
            "credentials"
          ]
        }
      ]
    },
    "HcxDataSource": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseDataSource"
        },
        {
          "properties": {
            "credentials": {
              "$ref": "#/definitions/PasswordCredentials"
            }
          }
        }
      ],
      "example": {
        "entity_type": "HcxDataSource",
        "entity_id": "1000:1310:12890123",
        "ip": "192.168.10.1",
        "proxy_id": "1000:104:12313412",
        "credentials": {
          "username": "admin@hcx.local",
          "password": "thePassword"
        },
        "nickname": "HCX1",
        "enabled": true,
        "notes": "HCX 1"
      }
    },
    "LicenseUsageCapacity": {
      "type": "string",
      "enum": [
        "CPUs",
        "VMs",
        "Edges",
        "Devices",
        "IPs",
        "vCPUs",
        "Hosts"
      ],
      "description": "Capacity types for license usage"
    },
    "LicenseUsageObject": {
      "type": "string",
      "enum": [
        "VMware vSphere",
        "VMware Cloud on AWS",
        "AWS",
        "Azure",
        "Physical IPs",
        "SD-WAN",
        "Networking Devices"
      ],
      "description": "License usage objects"
    },
    "LicenseCapacityType": {
      "type": "string",
      "enum": [
        "CPU",
        "CCU",
        "VM",
        "CORE",
        "TEN_MBPS",
        "THIRTY_MBPS",
        "FIFTY_MBPS",
        "HUNDRED_MBPS",
        "TWO_HUNDRED_MBPS",
        "FIVE_HUNDRED_MBPS",
        "ONE_GBPS",
        "TWO_GBPS",
        "FIVE_GBPS",
        "TEN_GBPS",
        "THREE_FIFTY_MBPS",
        "SEVEN_FIFTY_MBPS",
        "DEVICE"
      ],
      "description": "License entitlement types"
    },
    "LicenseEdition": {
      "type": "string",
      "enum": [
        "ADVANCED",
        "ENTERPRISE",
        "ROBO",
        "SDWAN",
        "NAV"
      ],
      "description": "Types for License Editions"
    },
    "LicenseUsage": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/definitions/LicenseUsageObject"
          },
          "unit": {
            "$ref": "#/definitions/LicenseUsageCapacity"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "example": 132,
            "description": "Count for entitlement in use"
          },
          "socketsUsed": {
            "type": "integer",
            "format": "int32",
            "example": 132,
            "description": "Count for sockets in use"
          },
          "coresUsed": {
            "type": "integer",
            "format": "int32",
            "example": 1584,
            "description": "Count for cores in use"
          },
          "edgesUsed": {
            "type": "integer",
            "format": "int32",
            "example": 0,
            "description": "Count for edges in use"
          },
          "devicesUsed": {
            "type": "integer",
            "format": "int32",
            "example": 0,
            "description": "Count for edges in use"
          },
          "query": {
            "type": "string",
            "example": "Hosts where manager.SDDC Type = 'ONPREM' and model != 'VMware Mobility Platform' and Witness = False group by manager order by sum(CPU Sockets)",
            "description": "Search query used to calculate the usage"
          }
        }
      }
    },
    "VRNILicense": {
      "type": "object",
      "properties": {
        "productName": {
          "type": "string",
          "example": "VMware vRealize Network Insight"
        },
        "evaluation": {
          "type": "boolean",
          "description": "true if license is evaluation license"
        },
        "licenseKey": {
          "type": "string",
          "example": "AAAAA-BBBBB-CCCCC-DDDDD-EEEE",
          "description": "license serial key"
        },
        "numberOfSockets": {
          "type": "integer",
          "format": "int32",
          "example": 25,
          "description": "sockets entitlement for this license"
        },
        "serviceTag": {
          "type": "string",
          "example": "CPN0EgdEOFVWNzM0",
          "description": "service tag"
        },
        "deploymentType": {
          "type": "string",
          "example": "onprem",
          "description": "environment deployment type"
        },
        "capacityType": {
          "$ref": "#/definitions/LicenseCapacityType"
        },
        "edition": {
          "$ref": "#/definitions/LicenseEdition"
        },
        "suspended": {
          "type": "boolean",
          "description": "true if customer state is suspended"
        },
        "deleted": {
          "type": "boolean",
          "description": "true if customer state is deleted"
        },
        "invalid": {
          "type": "boolean",
          "description": "true for license keys from last version, which are active only for grace period"
        },
        "entitlements": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "capacityType": {
                "$ref": "#/definitions/LicenseCapacityType"
              },
              "count": {
                "type": "integer",
                "format": "int32",
                "description": "capacity count for entitlement"
              }
            }
          },
          "description": "list of entitlements supported by the license"
        }
      }
    },
    "LicensingKeyRequest": {
      "type": "object",
      "properties": {
        "licenseKey": {
          "type": "string"
        }
      },
      "description": "license request object"
    },
    "LicensingActivate": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/VRNILicense"
        }
      }
    },
    "LicensingResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "object",
          "properties": {
            "licenses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VRNILicense"
              }
            },
            "licenseUsage": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LicenseUsage"
              }
            },
            "customerId": {
              "type": "integer",
              "format": "int32",
              "example": 10000,
              "description": "customer id"
            },
            "cpuCapacity": {
              "type": "integer",
              "format": "int32",
              "example": 10,
              "description": "cpu capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)"
            },
            "ccuCapacity": {
              "type": "integer",
              "format": "int32",
              "example": 10,
              "description": "ccu capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)"
            },
            "vmCapacity": {
              "type": "integer",
              "format": "int32",
              "example": 10,
              "description": "VM capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)"
            },
            "coreCapacity": {
              "type": "integer",
              "format": "int32",
              "example": 10,
              "description": "core capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)"
            },
            "edgeCapacity": {
              "type": "integer",
              "format": "int32",
              "example": 10,
              "description": "edge capacity of current non-expired (valid licenses) and older (invalid) licenses (during grace period)"
            },
            "serviceTag": {
              "type": "string",
              "example": "CJBOEgdEQVMzWTFI",
              "description": "service tag"
            },
            "expireDate": {
              "type": "integer",
              "format": "int32",
              "example": 10,
              "description": "Maximum of expiry date for current licenses, 0 if any non-expiry license is present. Invalid/already expired license is not considered here."
            },
            "enterprise": {
              "type": "boolean",
              "description": "true if non-expired ENTERPRISE license is available"
            },
            "evaluation": {
              "type": "boolean",
              "description": "true if all licenses are evaluation license"
            },
            "numOfEnterpriseLicense": {
              "type": "integer",
              "format": "int32",
              "example": 10,
              "description": "number of total enterprise licenses available"
            },
            "numOfValidLicense": {
              "type": "integer",
              "format": "int32",
              "example": 1,
              "description": "Total Number of valid licenses available. Active licenses from last major version which are only valid for grace period are not counted"
            },
            "numOfValidEnterpriseLicense": {
              "type": "integer",
              "format": "int32",
              "example": 10,
              "description": "Number of valid Enterprise licenses available. Active licenses from last major version which are only valid for grace period are not counted"
            },
            "numOfValidSDWANLicense": {
              "type": "integer",
              "format": "int32",
              "example": 5,
              "description": "Number of valid SDWAN licenses available. Active licenses from last major version which are only valid for grace period are not counted"
            },
            "numOfValidNAVLicense": {
              "type": "integer",
              "format": "int32",
              "example": 2,
              "description": "Number of valid NAV licenses available. Active licenses from last major version which are only valid for grace period are not counted"
            },
            "numOfValidAdvancedLicense": {
              "type": "integer",
              "format": "int32",
              "example": 5,
              "description": "Number of valid Advanced licenses available. Active licenses from last major version which are only valid for grace period are not counted"
            },
            "numOfValidROBOLicense": {
              "type": "integer",
              "format": "int32",
              "example": 1,
              "description": "Number of valid ROBO licenses available. Active licenses from last major version which are only valid for grace period are not counted"
            },
            "numOfActiveLicense": {
              "type": "integer",
              "format": "int32",
              "example": 1,
              "description": "Total Number of active licenses (non-expired and licenses from last major version during grace period)"
            },
            "numOfActiveEnterpriseLicense": {
              "type": "integer",
              "format": "int32",
              "example": 2,
              "description": "Total Number of active Enterprise licenses (non-expired and licenses from last major version during grace period)"
            },
            "numOfActiveSDWANLicense": {
              "type": "integer",
              "format": "int32",
              "example": 1,
              "description": "Total Number of active SDWAN licenses (non-expired and licenses from last major version during grace period)"
            },
            "numOfActiveNAVLicense": {
              "type": "integer",
              "format": "int32",
              "example": 7,
              "description": "Total Number of active NAV licenses (non-expired and licenses from last major version during grace period)"
            },
            "numOfActiveAdvancedLicense": {
              "type": "integer",
              "format": "int32",
              "example": 5,
              "description": "Total Number of active Advanced licenses (non-expired and licenses from last major version during grace period)"
            },
            "numOfActiveROBOLicense": {
              "type": "integer",
              "format": "int32",
              "example": 10,
              "description": "Total Number of active ROBO licenses (non-expired and licenses from last major version during grace period)"
            },
            "usedSockets": {
              "type": "integer",
              "format": "int32",
              "example": 64,
              "description": "Count of used sockets"
            },
            "usedCores": {
              "type": "integer",
              "format": "int32",
              "example": 768,
              "description": "Count of used cores"
            },
            "usedEdges": {
              "type": "integer",
              "format": "int32",
              "example": 10,
              "description": "Count of used edges"
            },
            "usedDevices": {
              "type": "integer",
              "format": "int32",
              "example": 10,
              "description": "Count of used devices"
            }
          }
        }
      }
    }
  }
}